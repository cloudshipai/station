syntax = "proto3";

package lighthouse.station.v1;
option go_package = "station/proto/lighthouse";

import "google/protobuf/timestamp.proto";

// StationService handles station registration, heartbeats, and connection management
service StationService {
    // Register a station with a registration key
    rpc RegisterStation(RegisterStationRequest) returns (RegisterStationResponse);
    
    // Send periodic heartbeats to maintain connection
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    
    // Get station configuration and updates
    rpc GetConfiguration(GetConfigurationRequest) returns (GetConfigurationResponse);
    
    // Stream connection for real-time communication
    rpc StreamConnection(stream StreamMessage) returns (stream StreamMessage);
}

// Registration request with key and station info
message RegisterStationRequest {
    string registration_key = 1;
    string hostname = 2;
    string ip_address = 3;
    int32 port = 4;
    string version = 5;
    string os_info = 6;
    HardwareInfo hardware_info = 7;
}

message RegisterStationResponse {
    bool success = 1;
    string message = 2;
    string station_id = 3;
    google.protobuf.Timestamp expires_at = 4;
    StationConfig config = 5;
}

// Heartbeat to maintain alive status
message HeartbeatRequest {
    string station_id = 1;
    SystemMetrics metrics = 2;
    string status = 3; // online, maintenance, error
}

message HeartbeatResponse {
    bool success = 1;
    string message = 2;
    StationConfig config = 3; // Updated config if available
    repeated string commands = 4; // Commands to execute
}

// Get latest configuration
message GetConfigurationRequest {
    string station_id = 1;
}

message GetConfigurationResponse {
    StationConfig config = 1;
}

// Bidirectional streaming for real-time communication
message StreamMessage {
    oneof message_type {
        HeartbeatRequest heartbeat = 1;
        HeartbeatResponse heartbeat_response = 2;
        CommandMessage command = 3;
        StatusUpdate status_update = 4;
        LogMessage log = 5;
    }
}

// Hardware information collected from station
message HardwareInfo {
    string cpu = 1;
    string memory = 2;
    string disk = 3;
    string gpu = 4;
    map<string, string> additional = 5;
}

// System performance metrics
message SystemMetrics {
    double cpu_usage = 1;      // Percentage 0-100
    double memory_usage = 2;   // Percentage 0-100
    double disk_usage = 3;     // Percentage 0-100
    int64 network_in = 4;      // Bytes received
    int64 network_out = 5;     // Bytes sent
    google.protobuf.Timestamp timestamp = 6;
}

// Station configuration
message StationConfig {
    bool auto_update = 1;
    string logging_level = 2;
    int32 max_concurrent_jobs = 3;
    string storage_path = 4;
    int32 heartbeat_interval = 5; // Seconds
    map<string, string> settings = 6;
}

// Command to be executed on station
message CommandMessage {
    string id = 1;
    string type = 2; // restart, update, configure, run_job
    map<string, string> parameters = 3;
    google.protobuf.Timestamp expires_at = 4;
}

// Status update from station
message StatusUpdate {
    string station_id = 1;
    string status = 2; // online, offline, maintenance, error
    string message = 3;
    google.protobuf.Timestamp timestamp = 4;
}

// Log message from station
message LogMessage {
    string station_id = 1;
    string level = 2; // debug, info, warn, error
    string message = 3;
    string component = 4;
    google.protobuf.Timestamp timestamp = 5;
}