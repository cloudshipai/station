// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: proto/lighthouse/station.proto

package lighthouse

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StationService_RegisterStation_FullMethodName  = "/lighthouse.station.v1.StationService/RegisterStation"
	StationService_Heartbeat_FullMethodName        = "/lighthouse.station.v1.StationService/Heartbeat"
	StationService_GetConfiguration_FullMethodName = "/lighthouse.station.v1.StationService/GetConfiguration"
	StationService_StreamConnection_FullMethodName = "/lighthouse.station.v1.StationService/StreamConnection"
)

// StationServiceClient is the client API for StationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// StationService handles station registration, heartbeats, and connection management
type StationServiceClient interface {
	// Register a station with a registration key
	RegisterStation(ctx context.Context, in *RegisterStationRequest, opts ...grpc.CallOption) (*RegisterStationResponse, error)
	// Send periodic heartbeats to maintain connection
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
	// Get station configuration and updates
	GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error)
	// Stream connection for real-time communication
	StreamConnection(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMessage, StreamMessage], error)
}

type stationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStationServiceClient(cc grpc.ClientConnInterface) StationServiceClient {
	return &stationServiceClient{cc}
}

func (c *stationServiceClient) RegisterStation(ctx context.Context, in *RegisterStationRequest, opts ...grpc.CallOption) (*RegisterStationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterStationResponse)
	err := c.cc.Invoke(ctx, StationService_RegisterStation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, StationService_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) GetConfiguration(ctx context.Context, in *GetConfigurationRequest, opts ...grpc.CallOption) (*GetConfigurationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetConfigurationResponse)
	err := c.cc.Invoke(ctx, StationService_GetConfiguration_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationServiceClient) StreamConnection(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamMessage, StreamMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StationService_ServiceDesc.Streams[0], StationService_StreamConnection_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMessage, StreamMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StationService_StreamConnectionClient = grpc.BidiStreamingClient[StreamMessage, StreamMessage]

// StationServiceServer is the server API for StationService service.
// All implementations must embed UnimplementedStationServiceServer
// for forward compatibility.
//
// StationService handles station registration, heartbeats, and connection management
type StationServiceServer interface {
	// Register a station with a registration key
	RegisterStation(context.Context, *RegisterStationRequest) (*RegisterStationResponse, error)
	// Send periodic heartbeats to maintain connection
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
	// Get station configuration and updates
	GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error)
	// Stream connection for real-time communication
	StreamConnection(grpc.BidiStreamingServer[StreamMessage, StreamMessage]) error
	mustEmbedUnimplementedStationServiceServer()
}

// UnimplementedStationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStationServiceServer struct{}

func (UnimplementedStationServiceServer) RegisterStation(context.Context, *RegisterStationRequest) (*RegisterStationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterStation not implemented")
}
func (UnimplementedStationServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedStationServiceServer) GetConfiguration(context.Context, *GetConfigurationRequest) (*GetConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfiguration not implemented")
}
func (UnimplementedStationServiceServer) StreamConnection(grpc.BidiStreamingServer[StreamMessage, StreamMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamConnection not implemented")
}
func (UnimplementedStationServiceServer) mustEmbedUnimplementedStationServiceServer() {}
func (UnimplementedStationServiceServer) testEmbeddedByValue()                        {}

// UnsafeStationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StationServiceServer will
// result in compilation errors.
type UnsafeStationServiceServer interface {
	mustEmbedUnimplementedStationServiceServer()
}

func RegisterStationServiceServer(s grpc.ServiceRegistrar, srv StationServiceServer) {
	// If the following call pancis, it indicates UnimplementedStationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StationService_ServiceDesc, srv)
}

func _StationService_RegisterStation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterStationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).RegisterStation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_RegisterStation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).RegisterStation(ctx, req.(*RegisterStationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_GetConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServiceServer).GetConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StationService_GetConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServiceServer).GetConfiguration(ctx, req.(*GetConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StationService_StreamConnection_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StationServiceServer).StreamConnection(&grpc.GenericServerStream[StreamMessage, StreamMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StationService_StreamConnectionServer = grpc.BidiStreamingServer[StreamMessage, StreamMessage]

// StationService_ServiceDesc is the grpc.ServiceDesc for StationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lighthouse.station.v1.StationService",
	HandlerType: (*StationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterStation",
			Handler:    _StationService_RegisterStation_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _StationService_Heartbeat_Handler,
		},
		{
			MethodName: "GetConfiguration",
			Handler:    _StationService_GetConfiguration_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamConnection",
			Handler:       _StationService_StreamConnection_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/lighthouse/station.proto",
}
