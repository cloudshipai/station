// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mcp_tools.sql

package queries

import (
	"context"
	"database/sql"
)

const createMCPTool = `-- name: CreateMCPTool :one
INSERT INTO mcp_tools (mcp_server_id, name, description, input_schema)
VALUES (?, ?, ?, ?)
RETURNING id, mcp_server_id, name, description, input_schema, created_at
`

type CreateMCPToolParams struct {
	McpServerID int64          `json:"mcp_server_id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	InputSchema sql.NullString `json:"input_schema"`
}

func (q *Queries) CreateMCPTool(ctx context.Context, arg CreateMCPToolParams) (McpTool, error) {
	row := q.db.QueryRowContext(ctx, createMCPTool,
		arg.McpServerID,
		arg.Name,
		arg.Description,
		arg.InputSchema,
	)
	var i McpTool
	err := row.Scan(
		&i.ID,
		&i.McpServerID,
		&i.Name,
		&i.Description,
		&i.InputSchema,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMCPToolsByServer = `-- name: DeleteMCPToolsByServer :exec
DELETE FROM mcp_tools WHERE mcp_server_id = ?
`

func (q *Queries) DeleteMCPToolsByServer(ctx context.Context, serverID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMCPToolsByServer, serverID)
	return err
}

const getMCPTool = `-- name: GetMCPTool :one
SELECT id, mcp_server_id, name, description, input_schema, created_at, updated_at FROM mcp_tools WHERE id = ?
`

func (q *Queries) GetMCPTool(ctx context.Context, id int64) (McpTool, error) {
	row := q.db.QueryRowContext(ctx, getMCPTool, id)
	var i McpTool
	err := row.Scan(
		&i.ID,
		&i.McpServerID,
		&i.Name,
		&i.Description,
		&i.InputSchema,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMCPToolsByEnvironment = `-- name: ListMCPToolsByEnvironment :many
SELECT t.id, t.mcp_server_id, t.name, t.description, t.input_schema, t.created_at, t.updated_at FROM mcp_tools t
JOIN mcp_servers s ON t.mcp_server_id = s.id
JOIN mcp_configs c ON s.config_id = c.id
WHERE c.environment_id = ? AND c.version = (
    SELECT MAX(mc.version) FROM mcp_configs mc WHERE mc.environment_id = c.environment_id
)
ORDER BY s.name, t.name
`

func (q *Queries) ListMCPToolsByEnvironment(ctx context.Context, environmentID int64) ([]McpTool, error) {
	rows, err := q.db.QueryContext(ctx, listMCPToolsByEnvironment, environmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []McpTool
	for rows.Next() {
		var i McpTool
		if err := rows.Scan(
			&i.ID,
			&i.McpServerID,
			&i.Name,
			&i.Description,
			&i.InputSchema,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMCPToolsByServer = `-- name: ListMCPToolsByServer :many
SELECT id, mcp_server_id, name, description, input_schema, created_at, updated_at FROM mcp_tools WHERE mcp_server_id = ? ORDER BY name
`

func (q *Queries) ListMCPToolsByServer(ctx context.Context, serverID int64) ([]McpTool, error) {
	rows, err := q.db.QueryContext(ctx, listMCPToolsByServer, serverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []McpTool
	for rows.Next() {
		var i McpTool
		if err := rows.Scan(
			&i.ID,
			&i.McpServerID,
			&i.Name,
			&i.Description,
			&i.InputSchema,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMCPToolsByServerInEnvironment = `-- name: ListMCPToolsByServerInEnvironment :many
SELECT t.id, t.mcp_server_id, t.name, t.description, t.input_schema, t.created_at, t.updated_at FROM mcp_tools t
JOIN mcp_servers s ON t.mcp_server_id = s.id
JOIN mcp_configs c ON s.config_id = c.id
WHERE c.environment_id = ? AND s.server_name = ? AND c.version = (
    SELECT MAX(mc.version) FROM mcp_configs mc WHERE mc.environment_id = c.environment_id
)
ORDER BY t.name
`

type ListMCPToolsByServerInEnvironmentParams struct {
	EnvironmentID int64  `json:"environment_id"`
	ServerName    string `json:"server_name"`
}

func (q *Queries) ListMCPToolsByServerInEnvironment(ctx context.Context, arg ListMCPToolsByServerInEnvironmentParams) ([]McpTool, error) {
	rows, err := q.db.QueryContext(ctx, listMCPToolsByServerInEnvironment, arg.EnvironmentID, arg.ServerName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []McpTool
	for rows.Next() {
		var i McpTool
		if err := rows.Scan(
			&i.ID,
			&i.McpServerID,
			&i.Name,
			&i.Description,
			&i.InputSchema,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
