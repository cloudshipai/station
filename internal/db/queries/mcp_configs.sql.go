// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mcp_configs.sql

package queries

import (
	"context"
)

const createMCPConfig = `-- name: CreateMCPConfig :one
INSERT INTO mcp_configs (environment_id, version, config_json, encryption_key_id)
VALUES (?, ?, ?, ?)
RETURNING id, environment_id, version, config_json, encryption_key_id, created_at, updated_at
`

type CreateMCPConfigParams struct {
	EnvironmentID   int64  `json:"environment_id"`
	Version         int64  `json:"version"`
	ConfigJson      string `json:"config_json"`
	EncryptionKeyID string `json:"encryption_key_id"`
}

func (q *Queries) CreateMCPConfig(ctx context.Context, arg CreateMCPConfigParams) (McpConfig, error) {
	row := q.db.QueryRowContext(ctx, createMCPConfig,
		arg.EnvironmentID,
		arg.Version,
		arg.ConfigJson,
		arg.EncryptionKeyID,
	)
	var i McpConfig
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Version,
		&i.ConfigJson,
		&i.EncryptionKeyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLatestMCPConfig = `-- name: GetLatestMCPConfig :one
SELECT id, environment_id, version, config_json, encryption_key_id, created_at, updated_at FROM mcp_configs 
WHERE environment_id = ? 
ORDER BY version DESC 
LIMIT 1
`

func (q *Queries) GetLatestMCPConfig(ctx context.Context, environmentID int64) (McpConfig, error) {
	row := q.db.QueryRowContext(ctx, getLatestMCPConfig, environmentID)
	var i McpConfig
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Version,
		&i.ConfigJson,
		&i.EncryptionKeyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMCPConfig = `-- name: GetMCPConfig :one
SELECT id, environment_id, version, config_json, encryption_key_id, created_at, updated_at FROM mcp_configs WHERE id = ?
`

func (q *Queries) GetMCPConfig(ctx context.Context, id int64) (McpConfig, error) {
	row := q.db.QueryRowContext(ctx, getMCPConfig, id)
	var i McpConfig
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Version,
		&i.ConfigJson,
		&i.EncryptionKeyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getMCPConfigByVersion = `-- name: GetMCPConfigByVersion :one
SELECT id, environment_id, version, config_json, encryption_key_id, created_at, updated_at FROM mcp_configs 
WHERE environment_id = ? AND version = ?
`

type GetMCPConfigByVersionParams struct {
	EnvironmentID int64 `json:"environment_id"`
	Version       int64 `json:"version"`
}

func (q *Queries) GetMCPConfigByVersion(ctx context.Context, arg GetMCPConfigByVersionParams) (McpConfig, error) {
	row := q.db.QueryRowContext(ctx, getMCPConfigByVersion, arg.EnvironmentID, arg.Version)
	var i McpConfig
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.Version,
		&i.ConfigJson,
		&i.EncryptionKeyID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNextMCPConfigVersion = `-- name: GetNextMCPConfigVersion :one
SELECT COALESCE(MAX(version), 0) + 1 as next_version
FROM mcp_configs 
WHERE environment_id = ?
`

func (q *Queries) GetNextMCPConfigVersion(ctx context.Context, environmentID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNextMCPConfigVersion, environmentID)
	var next_version int64
	err := row.Scan(&next_version)
	return next_version, err
}

const listMCPConfigsByEnvironment = `-- name: ListMCPConfigsByEnvironment :many
SELECT id, environment_id, version, config_json, encryption_key_id, created_at, updated_at FROM mcp_configs 
WHERE environment_id = ? 
ORDER BY version DESC
`

func (q *Queries) ListMCPConfigsByEnvironment(ctx context.Context, environmentID int64) ([]McpConfig, error) {
	rows, err := q.db.QueryContext(ctx, listMCPConfigsByEnvironment, environmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []McpConfig
	for rows.Next() {
		var i McpConfig
		if err := rows.Scan(
			&i.ID,
			&i.EnvironmentID,
			&i.Version,
			&i.ConfigJson,
			&i.EncryptionKeyID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
