// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: agent_tools.sql

package queries

import (
	"context"
	"database/sql"
)

const addAgentTool = `-- name: AddAgentTool :one
INSERT INTO agent_tools (agent_id, tool_name, environment_id)
VALUES (?, ?, ?)
RETURNING id, agent_id, tool_name, environment_id, created_at
`

type AddAgentToolParams struct {
	AgentID       int64  `json:"agent_id"`
	ToolName      string `json:"tool_name"`
	EnvironmentID int64  `json:"environment_id"`
}

func (q *Queries) AddAgentTool(ctx context.Context, arg AddAgentToolParams) (AgentTool, error) {
	row := q.db.QueryRowContext(ctx, addAgentTool, arg.AgentID, arg.ToolName, arg.EnvironmentID)
	var i AgentTool
	err := row.Scan(
		&i.ID,
		&i.AgentID,
		&i.ToolName,
		&i.EnvironmentID,
		&i.CreatedAt,
	)
	return i, err
}

const clearAgentTools = `-- name: ClearAgentTools :exec
DELETE FROM agent_tools WHERE agent_id = ?
`

func (q *Queries) ClearAgentTools(ctx context.Context, agentID int64) error {
	_, err := q.db.ExecContext(ctx, clearAgentTools, agentID)
	return err
}

const listAgentTools = `-- name: ListAgentTools :many
SELECT at.id, at.agent_id, at.tool_name, at.environment_id, at.created_at, 
       t.description as tool_description, t.input_schema as tool_schema, 
       s.name as server_name
FROM agent_tools at
JOIN mcp_tools t ON at.tool_name = t.name 
JOIN mcp_servers s ON t.mcp_server_id = s.id AND at.environment_id = s.environment_id
WHERE at.agent_id = ?
ORDER BY s.name, t.name
`

type ListAgentToolsRow struct {
	ID              int64          `json:"id"`
	AgentID         int64          `json:"agent_id"`
	ToolName        string         `json:"tool_name"`
	EnvironmentID   int64          `json:"environment_id"`
	CreatedAt       sql.NullTime   `json:"created_at"`
	ToolDescription sql.NullString `json:"tool_description"`
	ToolSchema      sql.NullString `json:"tool_schema"`
	ServerName      string         `json:"server_name"`
}

func (q *Queries) ListAgentTools(ctx context.Context, agentID int64) ([]ListAgentToolsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAgentTools, agentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAgentToolsRow
	for rows.Next() {
		var i ListAgentToolsRow
		if err := rows.Scan(
			&i.ID,
			&i.AgentID,
			&i.ToolName,
			&i.EnvironmentID,
			&i.CreatedAt,
			&i.ToolDescription,
			&i.ToolSchema,
			&i.ServerName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeAgentTool = `-- name: RemoveAgentTool :exec
DELETE FROM agent_tools WHERE agent_id = ? AND tool_name = ? AND environment_id = ?
`

type RemoveAgentToolParams struct {
	AgentID       int64  `json:"agent_id"`
	ToolName      string `json:"tool_name"`
	EnvironmentID int64  `json:"environment_id"`
}

func (q *Queries) RemoveAgentTool(ctx context.Context, arg RemoveAgentToolParams) error {
	_, err := q.db.ExecContext(ctx, removeAgentTool, arg.AgentID, arg.ToolName, arg.EnvironmentID)
	return err
}
