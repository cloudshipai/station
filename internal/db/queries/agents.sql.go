// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: agents.sql

package queries

import (
	"context"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (name, description, prompt, max_steps, environment_id, created_by)
VALUES (?, ?, ?, ?, ?, ?)
RETURNING id, name, description, prompt, max_steps, environment_id, created_by, model_id, created_at, updated_at
`

type CreateAgentParams struct {
	Name          string `json:"name"`
	Description   string `json:"description"`
	Prompt        string `json:"prompt"`
	MaxSteps      int64  `json:"max_steps"`
	EnvironmentID int64  `json:"environment_id"`
	CreatedBy     int64  `json:"created_by"`
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, createAgent,
		arg.Name,
		arg.Description,
		arg.Prompt,
		arg.MaxSteps,
		arg.EnvironmentID,
		arg.CreatedBy,
	)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Prompt,
		&i.MaxSteps,
		&i.EnvironmentID,
		&i.CreatedBy,
		&i.ModelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAgent = `-- name: DeleteAgent :exec
DELETE FROM agents WHERE id = ?
`

func (q *Queries) DeleteAgent(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAgent, id)
	return err
}

const getAgent = `-- name: GetAgent :one
SELECT id, name, description, prompt, max_steps, environment_id, created_by, model_id, created_at, updated_at FROM agents WHERE id = ?
`

func (q *Queries) GetAgent(ctx context.Context, id int64) (Agent, error) {
	row := q.db.QueryRowContext(ctx, getAgent, id)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Prompt,
		&i.MaxSteps,
		&i.EnvironmentID,
		&i.CreatedBy,
		&i.ModelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAgentByName = `-- name: GetAgentByName :one
SELECT id, name, description, prompt, max_steps, environment_id, created_by, model_id, created_at, updated_at FROM agents WHERE name = ?
`

func (q *Queries) GetAgentByName(ctx context.Context, name string) (Agent, error) {
	row := q.db.QueryRowContext(ctx, getAgentByName, name)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Prompt,
		&i.MaxSteps,
		&i.EnvironmentID,
		&i.CreatedBy,
		&i.ModelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAgents = `-- name: ListAgents :many
SELECT id, name, description, prompt, max_steps, environment_id, created_by, model_id, created_at, updated_at FROM agents ORDER BY name
`

func (q *Queries) ListAgents(ctx context.Context) ([]Agent, error) {
	rows, err := q.db.QueryContext(ctx, listAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Prompt,
			&i.MaxSteps,
			&i.EnvironmentID,
			&i.CreatedBy,
			&i.ModelID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgentsByEnvironment = `-- name: ListAgentsByEnvironment :many
SELECT id, name, description, prompt, max_steps, environment_id, created_by, model_id, created_at, updated_at FROM agents WHERE environment_id = ? ORDER BY name
`

func (q *Queries) ListAgentsByEnvironment(ctx context.Context, environmentID int64) ([]Agent, error) {
	rows, err := q.db.QueryContext(ctx, listAgentsByEnvironment, environmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Prompt,
			&i.MaxSteps,
			&i.EnvironmentID,
			&i.CreatedBy,
			&i.ModelID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAgentsByUser = `-- name: ListAgentsByUser :many
SELECT id, name, description, prompt, max_steps, environment_id, created_by, model_id, created_at, updated_at FROM agents WHERE created_by = ? ORDER BY name
`

func (q *Queries) ListAgentsByUser(ctx context.Context, createdBy int64) ([]Agent, error) {
	rows, err := q.db.QueryContext(ctx, listAgentsByUser, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Prompt,
			&i.MaxSteps,
			&i.EnvironmentID,
			&i.CreatedBy,
			&i.ModelID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAgent = `-- name: UpdateAgent :exec
UPDATE agents SET name = ?, description = ?, prompt = ?, max_steps = ? WHERE id = ?
`

type UpdateAgentParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Prompt      string `json:"prompt"`
	MaxSteps    int64  `json:"max_steps"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateAgent(ctx context.Context, arg UpdateAgentParams) error {
	_, err := q.db.ExecContext(ctx, updateAgent,
		arg.Name,
		arg.Description,
		arg.Prompt,
		arg.MaxSteps,
		arg.ID,
	)
	return err
}
