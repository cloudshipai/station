// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: mcp_servers.sql

package queries

import (
	"context"
)

const createMCPServer = `-- name: CreateMCPServer :one
INSERT INTO mcp_servers (config_id, server_name, server_url)
VALUES (?, ?, ?)
RETURNING id, config_id, server_name, server_url, created_at
`

type CreateMCPServerParams struct {
	ConfigID   int64  `json:"config_id"`
	ServerName string `json:"server_name"`
	ServerUrl  string `json:"server_url"`
}

func (q *Queries) CreateMCPServer(ctx context.Context, arg CreateMCPServerParams) (McpServer, error) {
	row := q.db.QueryRowContext(ctx, createMCPServer, arg.ConfigID, arg.ServerName, arg.ServerUrl)
	var i McpServer
	err := row.Scan(
		&i.ID,
		&i.ConfigID,
		&i.ServerName,
		&i.ServerUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMCPServersByConfig = `-- name: DeleteMCPServersByConfig :exec
DELETE FROM mcp_servers WHERE config_id = ?
`

func (q *Queries) DeleteMCPServersByConfig(ctx context.Context, configID int64) error {
	_, err := q.db.ExecContext(ctx, deleteMCPServersByConfig, configID)
	return err
}

const getMCPServer = `-- name: GetMCPServer :one
SELECT id, config_id, server_name, server_url, created_at FROM mcp_servers WHERE id = ?
`

func (q *Queries) GetMCPServer(ctx context.Context, id int64) (McpServer, error) {
	row := q.db.QueryRowContext(ctx, getMCPServer, id)
	var i McpServer
	err := row.Scan(
		&i.ID,
		&i.ConfigID,
		&i.ServerName,
		&i.ServerUrl,
		&i.CreatedAt,
	)
	return i, err
}

const listMCPServersByConfig = `-- name: ListMCPServersByConfig :many
SELECT id, config_id, server_name, server_url, created_at FROM mcp_servers WHERE config_id = ? ORDER BY server_name
`

func (q *Queries) ListMCPServersByConfig(ctx context.Context, configID int64) ([]McpServer, error) {
	rows, err := q.db.QueryContext(ctx, listMCPServersByConfig, configID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []McpServer
	for rows.Next() {
		var i McpServer
		if err := rows.Scan(
			&i.ID,
			&i.ConfigID,
			&i.ServerName,
			&i.ServerUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMCPServersByEnvironment = `-- name: ListMCPServersByEnvironment :many
SELECT s.id, s.config_id, s.server_name, s.server_url, s.created_at FROM mcp_servers s
JOIN mcp_configs c ON s.config_id = c.id
WHERE c.environment_id = ? AND c.version = (
    SELECT MAX(mc.version) FROM mcp_configs mc WHERE mc.environment_id = c.environment_id
)
ORDER BY s.server_name
`

func (q *Queries) ListMCPServersByEnvironment(ctx context.Context, environmentID int64) ([]McpServer, error) {
	rows, err := q.db.QueryContext(ctx, listMCPServersByEnvironment, environmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []McpServer
	for rows.Next() {
		var i McpServer
		if err := rows.Scan(
			&i.ID,
			&i.ConfigID,
			&i.ServerName,
			&i.ServerUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
