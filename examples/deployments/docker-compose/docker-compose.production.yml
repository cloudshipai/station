version: '3.8'

services:
  station:
    build:
      context: ../../
      dockerfile: docker/Dockerfile.production
    image: station:production
    ports:
      - "8080:8080"
    environment:
      # Litestream S3 Configuration
      LITESTREAM_S3_BUCKET: ${LITESTREAM_S3_BUCKET}
      LITESTREAM_S3_REGION: ${LITESTREAM_S3_REGION:-us-east-1}
      LITESTREAM_S3_ACCESS_KEY_ID: ${LITESTREAM_S3_ACCESS_KEY_ID}
      LITESTREAM_S3_SECRET_ACCESS_KEY: ${LITESTREAM_S3_SECRET_ACCESS_KEY}
      
      # Station Configuration
      PORT: 8080
      DATABASE_PATH: /data/station.db
      STATION_ENV: production
      
      # AI Provider APIs
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      
    volumes:
      # Ephemeral data directory - persistence via Litestream
      - station-data:/data
      - station-backup:/backup
      
      # GitOps configuration volumes (bind mounts for easy updates)
      - ./agent-templates:/app/agent-templates:ro
      - ./mcp-configs:/app/mcp-configs:ro
      - ./environments:/app/environments:ro
      
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
      
    restart: unless-stopped
    
    # Security
    user: "1000:1000"
    read_only: true
    tmpfs:
      - /tmp
      
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Optional: Reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    depends_on:
      - station
    restart: unless-stopped

volumes:
  station-data:
    driver: local
  station-backup:
    driver: local