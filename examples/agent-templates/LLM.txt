STATION_AGENT_TEMPLATE_SYSTEM

SYSTEM_OVERVIEW:
Station's Agent Template System enables packaging complete AI agent configurations as reusable bundles with dynamic variable substitution, dependency management, and multi-environment deployment capabilities.

CORE_COMPONENTS:
1. Creator: Bundle generation from templates
2. Validator: Comprehensive bundle and variable validation  
3. Manager: Installation, lifecycle, and dependency management
4. CLI: Interactive and file-based installation
5. API: Programmatic deployment endpoint

TEMPLATE_BUNDLE_STRUCTURE:
manifest.json: Bundle metadata, dependencies, variable schema
agent.json: Agent configuration template with {{ .VAR }} substitution
variables.schema.json: Variable definitions, types, validation rules
README.md: Human-readable documentation

VARIABLE_SYSTEM:
- Types: string, number, boolean, secret
- Attributes: required, sensitive, default, minimum, maximum
- Validation: pattern matching, conditional requirements
- Substitution: Go template engine with strict error handling
- Type preservation: JSON/YAML maintains original data types

INSTALLATION_METHODS:
1. CLI_VARS_FILE: --vars-file support for JSON/YAML configurations
2. CLI_INTERACTIVE: --interactive flag with masked sensitive input
3. CLI_DIRECT: --vars key=value pairs for quick deployment
4. API_ENDPOINT: POST /api/v1/agents/templates/install

API_VALIDATION_LAYERS:
1. Go struct binding with required field validation
2. JSON Schema for client-side validation and documentation
3. Bundle validator for template syntax verification
4. Variable schema validation against defined types
5. Environment existence verification
6. MCP dependency resolution and installation

API_PAYLOAD_FORMAT:
{
  "bundle_path": "string (required) - Path to bundle directory",
  "environment": "string (optional, default='default') - Target environment", 
  "variables": "object (optional) - Template variables with type preservation"
}

CLI_COMMAND_STRUCTURE:
stn agent bundle create <path> --name --author --description --type --tags
stn agent bundle validate <path>
stn agent bundle install <path> [environment] --vars-file --interactive --vars
stn agent bundle duplicate <agent_id> <target_env> --name --vars-file --interactive
stn agent bundle export <agent_id> <output_path> --env --include-deps --analyze-vars

VALIDATION_FEATURES:
- Template syntax validation using Go template parser
- Variable type checking against schema definitions  
- Required variable presence verification
- Conditional requirement validation (e.g., PROXY_URL required when ENABLE_PROXY=true)
- Numeric range validation (minimum/maximum bounds)
- String pattern matching with regex
- URL format validation for endpoint variables
- MCP bundle dependency resolution

SECURITY_FEATURES:
- Sensitive variable masking in CLI output (••••••••)
- Encrypted storage of sensitive values
- Hidden input for passwords/API keys in interactive mode
- Access control (admin-only in server mode)
- Input sanitization and validation

ENVIRONMENT_MANAGEMENT:
- Multi-environment deployment (dev, staging, production)
- Environment-specific variable overrides
- Environment validation before installation
- Isolated agent configurations per environment

DEPENDENCY_MANAGEMENT:
- MCP bundle dependency declaration and resolution
- Version constraint specifications (>=1.0.0, ^2.1.0)  
- Tool requirement validation and availability checking
- Conflict detection and resolution
- Installation order determination

ERROR_HANDLING:
- Comprehensive validation error messages with suggestions
- Bundle structure validation errors
- Template syntax parsing errors  
- Variable type mismatch errors
- Environment not found errors
- MCP dependency resolution errors
- File system access errors

TEMPLATE_FEATURES:
- Variable substitution: {{ .VARIABLE_NAME }}
- Conditional logic: {{ if .CONDITION }}...{{ else }}...{{ end }}
- Arithmetic operations: {{ add .X .Y }}, {{ mul .RATE 2 }}
- String functions: {{ lower .NAME }}, {{ upper .ENV }}
- Range operations for arrays/objects
- Default value fallbacks with type preservation

AUTOMATION_INTEGRATION:
- CI/CD pipeline integration via API endpoint
- GitOps workflow with version-controlled templates
- Bulk deployment scripts and automation
- Environment promotion workflows (dev → staging → prod)
- Monitoring and rollback capabilities
- Template versioning and lifecycle management

EXAMPLE_USE_CASES:
1. basic-agent: Simple file management with workspace configuration
2. web-scraper: API integration with proxy support and rate limiting
3. data-processor: Complex variable validation and transformation logic
4. api-integration: Production-ready multi-environment deployment
5. multi-environment: Enterprise GitOps workflow patterns

TESTING_COMMANDS:
stn agent bundle validate <bundle_path>
stn agent bundle install <bundle_path> --dry-run --vars-file <vars_file>
stn agent list --env <environment>
stn agent run <agent_id> "<task_description>"

BUNDLE_CREATION_WORKFLOW:
1. stn agent bundle create ./my-agent --name "Agent Name" --author "Author"
2. Edit agent.json with template variables
3. Update variables.schema.json with variable definitions
4. Add MCP dependencies to manifest.json
5. stn agent bundle validate ./my-agent
6. Deploy via CLI or API

VARIABLE_PRECEDENCE_ORDER:
1. CLI --vars flags (highest priority)
2. Interactive input prompts
3. --vars-file JSON/YAML values
4. Default values from schema (lowest priority)

DEPLOYMENT_PATTERNS:
- Development: Interactive mode with verbose logging
- Staging: YAML configuration files with moderate settings
- Production: JSON configuration with optimized parameters
- Multi-tenant: Variable templates per customer/environment