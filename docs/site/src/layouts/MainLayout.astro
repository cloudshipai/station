---
import type { MarkdownHeading } from 'astro'
import type { CollectionEntry } from 'astro:content'
import HeadCommon from '../components/HeadCommon.astro'
import HeadSEO from '../components/HeadSEO.astro'
import Header from '../components/Header/Header.astro'
import PageContent from '../components/PageContent/PageContent.astro'
import LeftSidebar from '../components/LeftSidebar/LeftSidebar.astro'
import RightSidebar from '../components/RightSidebar/RightSidebar.astro'
import Footer from '../components/Footer/Footer.astro'
import { EDIT_URL, SITE } from '../consts'
import '../styles/modern-docs.scss'

type Props = CollectionEntry<'docs'>['data'] & {
  headings: MarkdownHeading[]
}

const { headings, ...data } = Astro.props
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const currentPage = Astro.url.pathname
const currentFile = `src/content/docs${currentPage.replace(/\/$/, '')}.mdx`
const editUrl = `${EDIT_URL}/${currentFile}`
---

<html dir={data.dir} lang={data.lang} class="initial">
  <head>
    <HeadCommon />
    <HeadSEO {...data} canonicalUrl={canonicalURL} />
    <title>
      {`${data.title} ðŸš€ ${SITE.title}`}
    </title>
    <script src="https://unpkg.com/mermaid@10/dist/mermaid.min.js"></script>
    <script>
      // Initialize Mermaid when page loads
      document.addEventListener('DOMContentLoaded', function() {
        console.log('Initializing Mermaid...');
        
        // Configure Mermaid
        mermaid.initialize({
          startOnLoad: true,
          theme: 'default',
          securityLevel: 'loose'
        });
        
        // Find code blocks that contain Mermaid syntax (look for "graph TB", "sequenceDiagram", etc.)
        const preBlocks = document.querySelectorAll('pre code');
        const mermaidBlocks = [];
        
        preBlocks.forEach(codeBlock => {
          const content = codeBlock.textContent.trim();
          if (content.startsWith('graph ') || 
              content.startsWith('sequenceDiagram') || 
              content.startsWith('flowchart ') ||
              content.startsWith('gantt') ||
              content.startsWith('pie ') ||
              content.includes('graph TB') ||
              content.includes('graph LR')) {
            mermaidBlocks.push(codeBlock);
          }
        });
        
        console.log('Found', mermaidBlocks.length, 'mermaid code blocks');
        
        mermaidBlocks.forEach((codeBlock, index) => {
          const mermaidCode = codeBlock.textContent.trim();
          console.log('Converting block', index, ':', mermaidCode.substring(0, 50) + '...');
          
          // Create new div with mermaid class
          const mermaidDiv = document.createElement('div');
          mermaidDiv.className = 'mermaid';
          mermaidDiv.textContent = mermaidCode;
          mermaidDiv.style.cssText = `
            text-align: center;
            margin: 2rem 0;
          `;
          
          // Replace the pre block with the mermaid div
          const preElement = codeBlock.closest('pre');
          preElement.parentNode.replaceChild(mermaidDiv, preElement);
          
          console.log('Created mermaid div:', mermaidDiv);
        });
        
        // Re-run mermaid init after converting blocks
        setTimeout(() => {
          console.log('Re-initializing Mermaid after block conversion...');
          mermaid.init();
          
          // Add expand functionality after diagram rendering
          setTimeout(() => {
            console.log('Adding expand functionality...');
            addExpandToMermaid();
          }, 1000);
        }, 100);
      });
      
      function addExpandToMermaid() {
        console.log('Adding zoom controls to Mermaid diagrams...');
        const mermaidElements = document.querySelectorAll('.mermaid');
        console.log('Found', mermaidElements.length, 'mermaid elements');
        
        mermaidElements.forEach((mermaid, index) => {
          if (mermaid.classList.contains('zoom-enabled')) {
            return; // Already processed
          }
          
          console.log('Adding zoom controls to element', index);
          
          // Create wrapper container
          const wrapper = document.createElement('div');
          wrapper.className = 'mermaid-zoom-container';
          wrapper.style.cssText = `
            position: relative;
            margin: 2rem 0;
            border-radius: 8px;
            border: 1px solid var(--theme-divider, #e5e5e5);
            background: var(--theme-bg, white);
            overflow: auto;
            max-height: 80vh;
          `;
          
          // Wrap the mermaid element
          mermaid.parentNode.insertBefore(wrapper, mermaid);
          wrapper.appendChild(mermaid);
          
          // Style the mermaid element
          mermaid.style.cssText += `
            cursor: zoom-in;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            padding: 1rem;
            margin: 0;
          `;
          
          // Create zoom controls
          const zoomControls = document.createElement('div');
          zoomControls.className = 'zoom-controls';
          zoomControls.style.cssText = `
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            display: flex;
            gap: 0.25rem;
            opacity: 0.7;
            transition: opacity 0.2s ease;
            z-index: 10;
          `;
          
          const zoomLevels = [
            { label: '1Ã—', scale: 1 },
            { label: '1.5Ã—', scale: 1.5 },
            { label: '2Ã—', scale: 2 },
            { label: '2.5Ã—', scale: 2.5 }
          ];
          
          // Add expand button
          const expandBtn = document.createElement('button');
          expandBtn.innerHTML = 'â›¶';
          expandBtn.title = 'Open in full screen';
          expandBtn.className = 'expand-btn';
          expandBtn.style.cssText = `
            background: rgba(255,255,255,0.9);
            color: var(--theme-text, #333);
            border: 1px solid var(--theme-divider, #e5e5e5);
            padding: 0.25rem 0.5rem;
            border-radius: 4px;
            font-size: 0.875rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            backdrop-filter: blur(4px);
            margin-left: 0.5rem;
          `;
          
          expandBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            openFullScreenModal(mermaid, currentZoom);
          });
          
          expandBtn.addEventListener('mouseenter', () => {
            expandBtn.style.background = 'var(--theme-accent, #6366f1)';
            expandBtn.style.color = 'white';
            expandBtn.style.transform = 'translateY(-1px)';
          });
          
          expandBtn.addEventListener('mouseleave', () => {
            expandBtn.style.background = 'rgba(255,255,255,0.9)';
            expandBtn.style.color = 'var(--theme-text, #333)';
            expandBtn.style.transform = 'translateY(0)';
          });
          
          let currentZoom = 1;
          
          zoomLevels.forEach(level => {
            const btn = document.createElement('button');
            btn.textContent = level.label;
            btn.className = level.scale === 1 ? 'zoom-btn active' : 'zoom-btn';
            btn.style.cssText = `
              background: ${level.scale === 1 ? 'var(--theme-accent, #6366f1)' : 'rgba(255,255,255,0.9)'};
              color: ${level.scale === 1 ? 'white' : 'var(--theme-text, #333)'};
              border: 1px solid var(--theme-divider, #e5e5e5);
              padding: 0.25rem 0.5rem;
              border-radius: 4px;
              font-size: 0.75rem;
              font-weight: 600;
              cursor: pointer;
              transition: all 0.2s ease;
              backdrop-filter: blur(4px);
            `;
            
            btn.addEventListener('click', (e) => {
              e.stopPropagation();
              
              // Update active button
              zoomControls.querySelectorAll('.zoom-btn').forEach(b => {
                b.style.background = 'rgba(255,255,255,0.9)';
                b.style.color = 'var(--theme-text, #333)';
                b.classList.remove('active');
              });
              
              btn.style.background = 'var(--theme-accent, #6366f1)';
              btn.style.color = 'white';
              btn.classList.add('active');
              
              // Apply zoom
              currentZoom = level.scale;
              mermaid.style.transform = `scale(${level.scale})`;
              mermaid.style.transformOrigin = 'center';
              
              if (level.scale > 1) {
                mermaid.style.cursor = 'zoom-out';
                mermaid.style.zIndex = '100';
                mermaid.style.boxShadow = '0 8px 24px rgba(0,0,0,0.2)';
                mermaid.classList.add('zoomed');
              } else {
                mermaid.style.cursor = 'zoom-in';
                mermaid.style.zIndex = 'auto';
                mermaid.style.boxShadow = 'none';
                mermaid.classList.remove('zoomed');
              }
              
              console.log(`Zoom set to ${level.scale}x for diagram ${index}`);
            });
            
            btn.addEventListener('mouseenter', () => {
              if (!btn.classList.contains('active')) {
                btn.style.background = 'rgba(255,255,255,1)';
                btn.style.transform = 'translateY(-1px)';
              }
            });
            
            btn.addEventListener('mouseleave', () => {
              if (!btn.classList.contains('active')) {
                btn.style.background = 'rgba(255,255,255,0.9)';
                btn.style.transform = 'translateY(0)';
              }
            });
            
            zoomControls.appendChild(btn);
          });
          
          // Add expand button to controls
          zoomControls.appendChild(expandBtn);
          wrapper.appendChild(zoomControls);
          
          // Hover effects for the container
          wrapper.addEventListener('mouseenter', () => {
            zoomControls.style.opacity = '1';
            if (currentZoom === 1) {
              mermaid.style.transform = 'scale(1.02)';
              mermaid.style.boxShadow = '0 4px 12px rgba(0,0,0,0.15)';
            }
          });
          
          wrapper.addEventListener('mouseleave', () => {
            zoomControls.style.opacity = '0.7';
            if (currentZoom === 1) {
              mermaid.style.transform = 'scale(1)';
              mermaid.style.boxShadow = 'none';
            }
          });
          
          // Click to cycle through zoom levels
          mermaid.addEventListener('click', (e) => {
            e.preventDefault();
            const currentIndex = zoomLevels.findIndex(l => l.scale === currentZoom);
            const nextIndex = (currentIndex + 1) % zoomLevels.length;
            const nextLevel = zoomLevels[nextIndex];
            
            // Trigger the button click
            zoomControls.children[nextIndex].click();
          });
          
          mermaid.classList.add('zoom-enabled');
          console.log('Zoom controls added to element', index);
        });
      }
      
      function openFullScreenModal(mermaid, currentZoom) {
        console.log('Opening full screen modal with zoom:', currentZoom);
        
        // Create modal
        const modal = document.createElement('div');
        modal.className = 'fullscreen-modal';
        modal.style.cssText = `
          position: fixed;
          top: 0;
          left: 0;
          width: 100vw;
          height: 100vh;
          background: rgba(0, 0, 0, 0.95);
          z-index: 2000;
          display: flex;
          align-items: center;
          justify-content: center;
          animation: fadeIn 0.3s ease;
        `;
        
        const modalContent = document.createElement('div');
        modalContent.style.cssText = `
          background: var(--theme-bg, white);
          border-radius: 12px;
          max-width: 95vw;
          max-height: 95vh;
          position: relative;
          overflow: auto;
          box-shadow: 0 20px 40px rgba(0,0,0,0.4);
          display: flex;
          flex-direction: column;
        `;
        
        // Modal header with controls
        const modalHeader = document.createElement('div');
        modalHeader.style.cssText = `
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 1rem;
          border-bottom: 1px solid var(--theme-divider, #e5e5e5);
          background: var(--theme-bg-offset, #f8f9fa);
          border-radius: 12px 12px 0 0;
        `;
        
        const modalTitle = document.createElement('h3');
        modalTitle.textContent = 'Diagram View';
        modalTitle.style.cssText = `
          margin: 0;
          font-size: 1rem;
          font-weight: 600;
          color: var(--theme-text, #333);
        `;
        
        const modalControls = document.createElement('div');
        modalControls.style.cssText = `
          display: flex;
          gap: 0.5rem;
          align-items: center;
        `;
        
        // Modal zoom controls
        const modalZoomControls = document.createElement('div');
        modalZoomControls.style.cssText = `
          display: flex;
          gap: 0.25rem;
          margin-right: 1rem;
        `;
        
        const modalZoomLevels = [1, 1.5, 2, 2.5, 3, 4];
        let modalCurrentZoom = currentZoom;
        
        modalZoomLevels.forEach(level => {
          const btn = document.createElement('button');
          btn.textContent = level + 'Ã—';
          btn.style.cssText = `
            background: ${level === modalCurrentZoom ? 'var(--theme-accent, #6366f1)' : 'var(--theme-bg, white)'};
            color: ${level === modalCurrentZoom ? 'white' : 'var(--theme-text, #333)'};
            border: 1px solid var(--theme-divider, #e5e5e5);
            padding: 0.375rem 0.75rem;
            border-radius: 6px;
            font-size: 0.875rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
          `;
          
          btn.addEventListener('click', () => {
            modalCurrentZoom = level;
            clonedMermaid.style.transform = `scale(${level})`;
            clonedMermaid.style.transformOrigin = 'center';
            
            // Update button states
            modalZoomControls.querySelectorAll('button').forEach(b => {
              b.style.background = 'var(--theme-bg, white)';
              b.style.color = 'var(--theme-text, #333)';
            });
            btn.style.background = 'var(--theme-accent, #6366f1)';
            btn.style.color = 'white';
          });
          
          modalZoomControls.appendChild(btn);
        });
        
        const closeBtn = document.createElement('button');
        closeBtn.innerHTML = 'âœ• Close';
        closeBtn.style.cssText = `
          background: #ef4444;
          color: white;
          border: none;
          padding: 0.5rem 1rem;
          border-radius: 6px;
          font-size: 0.875rem;
          font-weight: 600;
          cursor: pointer;
          transition: all 0.2s ease;
        `;
        
        modalControls.appendChild(modalZoomControls);
        modalControls.appendChild(closeBtn);
        modalHeader.appendChild(modalTitle);
        modalHeader.appendChild(modalControls);
        
        // Modal body with diagram
        const modalBody = document.createElement('div');
        modalBody.style.cssText = `
          padding: 2rem;
          text-align: center;
          overflow: auto;
          flex: 1;
          background: var(--theme-bg, white);
        `;
        
        // Clone the mermaid diagram
        const clonedMermaid = mermaid.cloneNode(true);
        clonedMermaid.style.cssText = `
          transform: scale(${modalCurrentZoom});
          transform-origin: center;
          transition: transform 0.3s ease;
          display: inline-block;
          margin: 2rem;
        `;
        
        modalBody.appendChild(clonedMermaid);
        modalContent.appendChild(modalHeader);
        modalContent.appendChild(modalBody);
        modal.appendChild(modalContent);
        
        document.body.appendChild(modal);
        document.body.style.overflow = 'hidden';
        
        const closeModal = () => {
          modal.style.animation = 'fadeOut 0.3s ease forwards';
          setTimeout(() => {
            if (document.body.contains(modal)) {
              document.body.removeChild(modal);
            }
            document.body.style.overflow = '';
          }, 300);
        };
        
        closeBtn.addEventListener('click', closeModal);
        modal.addEventListener('click', (e) => {
          if (e.target === modal) closeModal();
        });
        
        document.addEventListener('keydown', function escapeHandler(e) {
          if (e.key === 'Escape') {
            closeModal();
            document.removeEventListener('keydown', escapeHandler);
          }
        });
      }
    </script>
    <style>
      body {
        width: 100%;
        display: grid;
        grid-template-rows: var(--theme-navbar-height) 1fr;
        --gutter: 1rem;
        --doc-padding: 2rem;
        --sidebar-width: 280px;
        --toc-width: 240px;
        --content-max-width: 1024px;
        overflow-x: hidden;
      }

      .layout {
        display: grid;
        max-width: 1600px;
        margin: 0 auto;
        padding: 0 var(--gutter);
        gap: 2rem;
        grid-template-columns: 1fr;
        height: calc(100vh - var(--theme-navbar-height));
        overflow: hidden;
      }

      .grid-sidebar {
        height: 100%;
        position: relative;
        overflow: hidden;
        display: flex;
        flex-direction: column;
      }

      #grid-left {
        position: fixed;
        background-color: var(--theme-bg);
        z-index: 10;
        display: none;
        width: var(--sidebar-width);
        border-right: 1px solid var(--theme-divider);
        height: calc(100vh - var(--theme-navbar-height));
        top: var(--theme-navbar-height);
        left: 0;
        overflow: hidden;
      }

      #grid-main {
        padding: var(--doc-padding) 0;
        overflow-y: auto;
        overflow-x: hidden;
        min-width: 0;
        max-width: 100%;
        height: 100%;
      }

      #grid-right {
        display: none;
        width: var(--toc-width);
        border-left: 1px solid var(--theme-divider);
        padding-left: 2rem;
        overflow: hidden;
        height: 100%;
      }

      /* Mobile-first: Single column */
      @media (max-width: 767px) {
        .layout {
          padding: 0 0.75rem;
          gap: 0;
          height: auto;
          overflow: visible;
        }
        
        #grid-main {
          padding: 1rem 0;
          height: auto;
          overflow: visible;
        }
      }

      /* Tablet: Two columns (sidebar + content) */
      @media (min-width: 768px) and (max-width: 1199px) {
        .layout {
          grid-template-columns: var(--sidebar-width) 1fr;
          gap: 2rem;
        }

        #grid-left {
          display: block;
          position: relative;
          background: transparent;
          border-right: 1px solid var(--theme-divider);
          padding-right: 1.5rem;
          width: auto;
          height: 100%;
          top: auto;
          left: auto;
        }

        #grid-main {
          max-width: var(--content-max-width);
        }
      }

      /* Desktop: Three columns (sidebar + content + toc) */
      @media (min-width: 1200px) {
        .layout {
          grid-template-columns: var(--sidebar-width) 1fr var(--toc-width);
          gap: 3rem;
        }

        #grid-left {
          display: block;
          position: relative;
          background: transparent;
          border-right: 1px solid var(--theme-divider);
          padding-right: 1.5rem;
          width: auto;
          height: 100%;
          top: auto;
          left: auto;
        }

        #grid-main {
          max-width: var(--content-max-width);
          margin: 0 auto;
        }

        #grid-right {
          display: block;
        }
      }

      /* Large desktop: Optimized spacing */
      @media (min-width: 1400px) {
        .layout {
          gap: 4rem;
          padding: 0 2rem;
        }
      }
    </style>
    <style is:global>
      .mobile-sidebar-toggle {
        overflow: hidden;
      }

      .mobile-sidebar-toggle #grid-left {
        display: block !important;
        position: fixed;
        top: var(--theme-navbar-height);
        left: 0;
        width: var(--sidebar-width);
        height: calc(100vh - var(--theme-navbar-height));
        background: var(--theme-bg);
        z-index: 1000;
        box-shadow: 2px 0 8px rgba(0, 0, 0, 0.1);
      }

      .mobile-sidebar-toggle::after {
        content: '';
        position: fixed;
        top: var(--theme-navbar-height);
        left: 0;
        width: 100vw;
        height: calc(100vh - var(--theme-navbar-height));
        background: rgba(0, 0, 0, 0.5);
        z-index: 999;
      }

      /* Table of Contents Styling - Always visible and properly scrollable */
      #grid-right {
        font-size: 0.875rem;
        overflow: hidden;
        min-width: 0;
        position: relative;
        display: flex;
        flex-direction: column;
      }

      #grid-right .heading {
        font-size: 0.8125rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        color: var(--theme-text-light);
        margin: 0 0 1rem 0;
        padding-bottom: 0.5rem;
        border-bottom: 1px solid var(--theme-divider);
        word-wrap: break-word;
        overflow-wrap: break-word;
        hyphens: auto;
        flex-shrink: 0;
      }

      #grid-right ul {
        list-style: none;
        margin: 0;
        padding: 0;
        min-width: 0;
        flex: 1;
        overflow-y: auto;
        overflow-x: hidden;
      }

      #grid-right li {
        margin: 0.25rem 0;
        min-width: 0;
      }

      #grid-right a {
        display: block;
        padding: 0.375rem 0;
        color: var(--theme-text-light);
        text-decoration: none;
        line-height: 1.4;
        transition: color 0.2s ease;
        word-wrap: break-word;
        overflow-wrap: break-word;
        hyphens: auto;
        white-space: normal;
        min-width: 0;
        max-width: 100%;
      }

      #grid-right a:hover {
        color: var(--theme-accent);
      }

      #grid-right .current-header-link a {
        color: var(--theme-accent);
        font-weight: 500;
      }

      /* TOC Scrollbar styling */
      #grid-right ul::-webkit-scrollbar {
        width: 6px;
      }

      #grid-right ul::-webkit-scrollbar-track {
        background: transparent;
      }

      #grid-right ul::-webkit-scrollbar-thumb {
        background: var(--theme-text-lighter, rgba(255, 255, 255, 0.2));
        border-radius: 3px;
      }

      #grid-right ul::-webkit-scrollbar-thumb:hover {
        background: var(--theme-text-light, rgba(255, 255, 255, 0.3));
      }
    </style>
  </head>

  <body>
    <Header currentPage={currentPage} />
    <main class="layout">
      <aside id="grid-left" class="grid-sidebar" title="Site Navigation">
        <LeftSidebar currentPage={currentPage} />
      </aside>
      <div id="grid-main">
        <PageContent title={data.title} headings={headings} editUrl={editUrl}>
          <slot />
        </PageContent>
      </div>
      <aside id="grid-right" class="grid-sidebar" title="Table of Contents">
        <RightSidebar headings={headings} editUrl={editUrl} />
      </aside>
    </main>
    <Footer path={currentFile} />
  </body>
</html>
