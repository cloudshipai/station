---
import type { MarkdownHeading } from 'astro'
import type { CollectionEntry } from 'astro:content'
import HeadCommon from '../components/HeadCommon.astro'
import HeadSEO from '../components/HeadSEO.astro'
import Header from '../components/Header/Header.astro'
import PageContent from '../components/PageContent/PageContent.astro'
import LeftSidebar from '../components/LeftSidebar/LeftSidebar.astro'
import RightSidebar from '../components/RightSidebar/RightSidebar.astro'
import Footer from '../components/Footer/Footer.astro'
import { EDIT_URL, SITE } from '../consts'

type Props = CollectionEntry<'docs'>['data'] & {
  headings: MarkdownHeading[]
}

const { headings, ...data } = Astro.props
const canonicalURL = new URL(Astro.url.pathname, Astro.site)
const currentPage = Astro.url.pathname
const currentFile = `src/content/docs${currentPage.replace(/\/$/, '')}.mdx`
const editUrl = `${EDIT_URL}/${currentFile}`
---

<html dir={data.dir} lang={data.lang} class="initial">
  <head>
    <HeadCommon />
    <HeadSEO {...data} canonicalUrl={canonicalURL} />
    <title>
      {`${data.title} ðŸš€ ${SITE.title}`}
    </title>
    <script src="https://cdn.jsdelivr.net/npm/mermaid@10.6.1/dist/mermaid.min.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', function() {
        // Initialize Mermaid
        mermaid.initialize({
          startOnLoad: false,
          theme: 'default',
          securityLevel: 'loose',
          themeVariables: {
            primaryColor: '#667eea',
            primaryTextColor: '#fff',
            primaryBorderColor: '#764ba2',
            lineColor: '#333',
            sectionBkgColor: '#f8fafc',
            altSectionBkgColor: '#e2e8f0'
          }
        });

        // Find all code blocks with language "mermaid"
        const mermaidBlocks = document.querySelectorAll('pre code.language-mermaid');
        console.log('Found Mermaid blocks:', mermaidBlocks.length);
        
        mermaidBlocks.forEach((block, i) => {
          const diagramCode = block.textContent.trim();
          const diagramId = `mermaid-diagram-${i}`;
          console.log('Processing Mermaid diagram:', diagramId, diagramCode.substring(0, 50) + '...');
          
          try {
            // Create a div to render the diagram
            const diagramDiv = document.createElement('div');
            diagramDiv.className = 'mermaid-diagram';
            diagramDiv.style.textAlign = 'center';
            diagramDiv.style.margin = '2rem 0';
            diagramDiv.id = diagramId;
            diagramDiv.textContent = diagramCode;
            
            // Replace the pre block with the diagram div
            block.closest('pre').replaceWith(diagramDiv);
            
            // Initialize this specific diagram
            mermaid.init(undefined, diagramDiv);
          } catch (error) {
            console.error('Mermaid rendering error for', diagramId, ':', error);
          }
        });
      });
    </script>
    <style>
      body {
        width: 100%;
        display: grid;
        grid-template-rows: var(--theme-navbar-height) 1fr;
        --gutter: 0.5rem;
        --doc-padding: 2rem;
      }

      .layout {
        display: grid;
        grid-auto-flow: column;
        grid-template-columns:
          minmax(var(--gutter), 1fr) minmax(0, var(--max-width))
          minmax(var(--gutter), 1fr);
        overflow-x: hidden;
      }

      .grid-sidebar {
        height: 100vh;
        position: sticky;
        top: 0;
        padding: 0;
      }

      #grid-left {
        position: fixed;
        background-color: var(--theme-bg);
        z-index: 10;
        display: none;
      }

      #grid-main {
        padding: var(--doc-padding) var(--gutter);
        grid-column: 2;
        display: flex;
        flex-direction: column;
        height: 100%;
      }

      #grid-right {
        display: none;
      }

      @media (min-width: 50em) {
        .layout {
          overflow: initial;
          grid-template-columns: 20rem minmax(0, var(--max-width));
          gap: 1em;
        }

        #grid-left {
          display: flex;
          padding-left: 2rem;
          position: sticky;
          grid-column: 1;
        }
      }

      @media (min-width: 72em) {
        .layout {
          grid-template-columns: 20rem minmax(0, var(--max-width)) 18rem;
          padding-left: 0;
          padding-right: 0;
          margin: 0 auto;
        }

        #grid-right {
          grid-column: 3;
          display: flex;
        }
      }
    </style>
    <style is:global>
      .layout > * {
        width: 100%;
        height: 100%;
      }

      .mobile-sidebar-toggle {
        overflow: hidden;
      }

      .mobile-sidebar-toggle #grid-left {
        display: block;
        top: 2rem;
      }
    </style>
  </head>

  <body>
    <Header currentPage={currentPage} />
    <main class="layout">
      <aside id="grid-left" class="grid-sidebar" title="Site Navigation">
        <LeftSidebar currentPage={currentPage} />
      </aside>
      <div id="grid-main">
        <PageContent title={data.title} headings={headings} editUrl={editUrl}>
          <slot />
        </PageContent>
      </div>
      <aside id="grid-right" class="grid-sidebar" title="Table of Contents">
        <RightSidebar headings={headings} editUrl={editUrl} />
      </aside>
    </main>
    <Footer path={currentFile} />
  </body>
</html>
