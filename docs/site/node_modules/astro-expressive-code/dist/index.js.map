{"version":3,"sources":["../src/index.ts","../src/vite-plugin.ts"],"sourcesContent":["import type { AstroIntegration } from 'astro'\nimport type { RemarkExpressiveCodeOptions } from 'remark-expressive-code'\nimport remarkExpressiveCode, { createRenderer, getStableObjectHash } from 'remark-expressive-code'\nimport { vitePluginAstroExpressiveCode } from './vite-plugin'\n\nexport * from 'remark-expressive-code'\n\nexport type AstroExpressiveCodeOptions = RemarkExpressiveCodeOptions & {\n\t/**\n\t * Determines if the styles required to display code blocks should be emitted into a separate\n\t * CSS file rather than being inlined into the rendered HTML of the first code block per page.\n\t *\n\t * This is recommended for sites containing multiple pages with code blocks, as it will reduce\n\t * the overall footprint of the site when navigating between pages.\n\t *\n\t * The generated URL is located inside Astro's assets directory and includes a content hash\n\t * so it can be cached indefinitely by browsers. If you are using the default values for the\n\t * Astro config options `base`, `build.assets`, `build.assetsPrefix`, the resulting URL\n\t * will be `/_astro/ec.{hash}.css`.\n\t *\n\t * **Important**: To actually benefit from caching, please ensure that your hosting provider\n\t * serves the contents of the assets directory as immutable files with a long cache lifetime,\n\t * e.g. `Cache-Control: public,max-age=31536000,immutable`.\n\t *\n\t * @default true\n\t */\n\temitExternalStylesheet?: boolean | undefined\n}\n\n/**\n * Astro integration that adds Expressive Code support to code blocks in Markdown & MDX documents.\n */\nexport function astroExpressiveCode(options: AstroExpressiveCodeOptions = {}) {\n\t// As the arguments of the `astro:config:setup` hook are incompatible between Astro versions,\n\t// we just access this type internally and accept `unknown` args externally to prevent\n\t// version-specific types from being included in the build output\n\ttype ConfigSetupHookArgs = Parameters<NonNullable<AstroIntegration['hooks']['astro:config:setup']>>[0]\n\n\tconst integration = {\n\t\tname: 'astro-expressive-code',\n\t\thooks: {\n\t\t\t'astro:config:setup': async (args: unknown) => {\n\t\t\t\tconst { config, updateConfig, injectRoute, logger } = args as ConfigSetupHookArgs\n\t\t\t\tconst { emitExternalStylesheet = true, customCreateRenderer, plugins = [], shiki = true, ...rest } = options ?? {}\n\n\t\t\t\t// Validate Astro configuration\n\t\t\t\tconst ownPosition = config.integrations.findIndex((integration) => integration.name === 'astro-expressive-code')\n\t\t\t\tconst mdxPosition = config.integrations.findIndex((integration) => integration.name === '@astrojs/mdx')\n\t\t\t\tif (ownPosition > -1 && mdxPosition > -1 && mdxPosition < ownPosition) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Incorrect integration order: To allow code blocks on MDX pages to use\n\t\t\t\t\t\tastro-expressive-code, please move astroExpressiveCode() before mdx()\n\t\t\t\t\t\tin the \"integrations\" array of your Astro config file.`.replace(/\\s+/g, ' ')\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\t// Determine the assets directory and href prefix from the Astro config\n\t\t\t\tconst assetsDir = config.build?.assets || '_astro'\n\t\t\t\tconst assetsHrefPrefix = (config?.build?.assetsPrefix || config?.base || '').trim().replace(/\\/+$/g, '')\n\n\t\t\t\t// Add a plugin that inserts external references to the styles and scripts\n\t\t\t\t// that would normally be inlined into the first code block of every page\n\t\t\t\tconst hashedStyles: [string, string][] = []\n\t\t\t\tconst hashedScripts: [string, string][] = []\n\t\t\t\tplugins.push({\n\t\t\t\t\tname: 'astro-expressive-code',\n\t\t\t\t\thooks: {\n\t\t\t\t\t\tpostprocessRenderedBlockGroup: ({ renderData, renderedGroupContents }) => {\n\t\t\t\t\t\t\t// Only continue if this is the first code block group of the page\n\t\t\t\t\t\t\tconst isFirstGroupInDocument = renderedGroupContents[0]?.codeBlock.parentDocument?.positionInDocument?.groupIndex === 0\n\t\t\t\t\t\t\tif (!isFirstGroupInDocument) return\n\n\t\t\t\t\t\t\ttype HastElement = Extract<(typeof renderData.groupAst.children)[number], { type: 'element' }>\n\t\t\t\t\t\t\tconst extraElements: HastElement[] = []\n\n\t\t\t\t\t\t\t// Add a hashed stylesheet links\n\t\t\t\t\t\t\thashedStyles.forEach(([hashedRoute]) => {\n\t\t\t\t\t\t\t\textraElements.push({\n\t\t\t\t\t\t\t\t\ttype: 'element',\n\t\t\t\t\t\t\t\t\ttagName: 'link',\n\t\t\t\t\t\t\t\t\tproperties: { rel: 'stylesheet', href: `${assetsHrefPrefix}${hashedRoute}` },\n\t\t\t\t\t\t\t\t\tchildren: [],\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t// Add hashed script module links for all JS modules\n\t\t\t\t\t\t\thashedScripts.forEach(([hashedRoute]) => {\n\t\t\t\t\t\t\t\textraElements.push({\n\t\t\t\t\t\t\t\t\ttype: 'element',\n\t\t\t\t\t\t\t\t\ttagName: 'script',\n\t\t\t\t\t\t\t\t\tproperties: { type: 'module', src: `${assetsHrefPrefix}${hashedRoute}` },\n\t\t\t\t\t\t\t\t\tchildren: [],\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\tif (!extraElements.length) return\n\t\t\t\t\t\t\trenderData.groupAst.children.unshift(...extraElements)\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\t// Unless Shiki was disabled, merge any supported Shiki settings\n\t\t\t\t// from the Astro config into the plugin options\n\t\t\t\tconst mergedShikiConfig = shiki === true ? {} : shiki\n\t\t\t\tif (mergedShikiConfig && !mergedShikiConfig.langs && config.markdown?.shikiConfig?.langs) {\n\t\t\t\t\tmergedShikiConfig.langs = config.markdown.shikiConfig.langs as NonNullable<typeof mergedShikiConfig.langs>\n\t\t\t\t}\n\n\t\t\t\t// Create the renderer\n\t\t\t\tconst renderer = await (customCreateRenderer ?? createRenderer)({\n\t\t\t\t\tplugins,\n\t\t\t\t\tlogger,\n\t\t\t\t\tshiki: mergedShikiConfig,\n\t\t\t\t\t...rest,\n\t\t\t\t})\n\n\t\t\t\t// Unless disabled, move the base and theme styles from the inline renderer\n\t\t\t\t// into an external CSS file that can be cached by browsers\n\t\t\t\tif (emitExternalStylesheet) {\n\t\t\t\t\tconst combinedStyles = `${renderer.baseStyles}${renderer.themeStyles}`\n\t\t\t\t\thashedStyles.push(getHashedRouteWithContent(combinedStyles, `/${assetsDir}/ec.{hash}.css`))\n\t\t\t\t\trenderer.baseStyles = ''\n\t\t\t\t\trenderer.themeStyles = ''\n\t\t\t\t}\n\n\t\t\t\t// Also move any JS modules into external files\n\t\t\t\t// (this is always enabled because the alternative using `injectScript`\n\t\t\t\t// does not allow omitting the scripts on pages without any code blocks)\n\t\t\t\tconst uniqueJsModules = [...new Set<string>(renderer.jsModules)]\n\t\t\t\trenderer.jsModules = []\n\t\t\t\thashedScripts.push(...uniqueJsModules.map((moduleCode) => getHashedRouteWithContent(moduleCode, `/${assetsDir}/ec.{hash}.js`)))\n\n\t\t\t\t// Inject route handlers that provide access to the extracted styles & scripts\n\t\t\t\thashedStyles.forEach(([hashedRoute]) => {\n\t\t\t\t\tconst entrypoint = new URL('../routes/styles.ts', import.meta.url).href\n\t\t\t\t\tinjectRoute({\n\t\t\t\t\t\tpattern: hashedRoute,\n\t\t\t\t\t\tentryPoint: entrypoint,\n\t\t\t\t\t\t// @ts-expect-error: `entrypoint` is the new name since Astro 4\n\t\t\t\t\t\tentrypoint,\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t\thashedScripts.forEach(([hashedRoute]) => {\n\t\t\t\t\tconst entrypoint = new URL('../routes/scripts.ts', import.meta.url).href\n\t\t\t\t\tinjectRoute({\n\t\t\t\t\t\tpattern: hashedRoute,\n\t\t\t\t\t\tentryPoint: entrypoint,\n\t\t\t\t\t\t// @ts-expect-error: `entrypoint` is the new name since Astro 4\n\t\t\t\t\t\tentrypoint,\n\t\t\t\t\t})\n\t\t\t\t})\n\n\t\t\t\tconst remarkExpressiveCodeOptions: RemarkExpressiveCodeOptions = {\n\t\t\t\t\tcustomCreateRenderer: () => renderer,\n\t\t\t\t\tplugins,\n\t\t\t\t\tlogger,\n\t\t\t\t\tshiki: mergedShikiConfig,\n\t\t\t\t\t...rest,\n\t\t\t\t}\n\n\t\t\t\tupdateConfig({\n\t\t\t\t\tvite: {\n\t\t\t\t\t\tplugins: [\n\t\t\t\t\t\t\t// Add the Vite plugin that provides all data for the route handler\n\t\t\t\t\t\t\tvitePluginAstroExpressiveCode({\n\t\t\t\t\t\t\t\tstyles: hashedStyles,\n\t\t\t\t\t\t\t\tscripts: hashedScripts,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\tmarkdown: {\n\t\t\t\t\t\tsyntaxHighlight: false,\n\t\t\t\t\t\tremarkPlugins: [[remarkExpressiveCode, remarkExpressiveCodeOptions]],\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t},\n\t\t},\n\t} satisfies AstroIntegration\n\n\treturn integration\n}\n\n// Provide a default export for convenience and `astro add astro-expressive-code` compatibility\nexport default astroExpressiveCode\n\n/**\n * Generates a hashed route and content tuple for a given content string.\n */\nfunction getHashedRouteWithContent(content: string, routeTemplate: string): [string, string] {\n\tconst contentHash = getStableObjectHash(content, { hashLength: 5 })\n\treturn [routeTemplate.replace('{hash}', contentHash), content]\n}\n","import type { ViteUserConfig } from 'astro'\n\nfunction resolveVirtualModuleId<T extends string>(id: T): `\\0${T}` {\n\treturn `\\0${id}`\n}\n\n/**\n * This Vite plugin provides access to page-wide styles & scripts that the Astro integration\n * extracted from its `RemarkExpressiveCodeRenderer`. We extract these contents from the renderer\n * to prevent the remark plugin from repeatedly injecting them into the HTML output of every page\n * while still allowing pages to load them on demand if they contain code blocks.\n *\n * All data is provided as virtual modules under the `virtual:astro-expressive-code/*` namespace,\n * which can be used by injected routes to generate CSS & JS files.\n */\nexport function vitePluginAstroExpressiveCode(contents: { styles: [string, string][]; scripts: [string, string][] }): NonNullable<ViteUserConfig['plugins']>[number] {\n\t// Map virtual module names to their code contents as strings\n\tconst modules = {\n\t\t'virtual:astro-expressive-code/scripts': `export const scripts = ${JSON.stringify(contents.scripts)}`,\n\t\t'virtual:astro-expressive-code/styles': `export const styles = ${JSON.stringify(contents.styles)}`,\n\t} satisfies Record<string, string>\n\n\t// Create a map of module names prefixed with `\\0` to their original form\n\tconst resolutionMap = Object.fromEntries((Object.keys(modules) as (keyof typeof modules)[]).map((key) => [resolveVirtualModuleId(key), key]))\n\n\treturn {\n\t\tname: 'vite-plugin-astro-expressive-code',\n\t\tresolveId(id): string | void {\n\t\t\tif (id in modules) return resolveVirtualModuleId(id)\n\t\t},\n\t\tload(id): string | void {\n\t\t\tconst resolution = resolutionMap[id]\n\t\t\tif (resolution) return modules[resolution]\n\t\t},\n\t}\n}\n"],"mappings":"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","names":["integration"]}