import { RemarkExpressiveCodeOptions } from 'remark-expressive-code';
export * from 'remark-expressive-code';

type AstroExpressiveCodeOptions = RemarkExpressiveCodeOptions & {
    /**
     * Determines if the styles required to display code blocks should be emitted into a separate
     * CSS file rather than being inlined into the rendered HTML of the first code block per page.
     *
     * This is recommended for sites containing multiple pages with code blocks, as it will reduce
     * the overall footprint of the site when navigating between pages.
     *
     * The generated URL is located inside Astro's assets directory and includes a content hash
     * so it can be cached indefinitely by browsers. If you are using the default values for the
     * Astro config options `base`, `build.assets`, `build.assetsPrefix`, the resulting URL
     * will be `/_astro/ec.{hash}.css`.
     *
     * **Important**: To actually benefit from caching, please ensure that your hosting provider
     * serves the contents of the assets directory as immutable files with a long cache lifetime,
     * e.g. `Cache-Control: public,max-age=31536000,immutable`.
     *
     * @default true
     */
    emitExternalStylesheet?: boolean | undefined;
};
/**
 * Astro integration that adds Expressive Code support to code blocks in Markdown & MDX documents.
 */
declare function astroExpressiveCode(options?: AstroExpressiveCodeOptions): {
    name: string;
    hooks: {
        'astro:config:setup': (args: unknown) => Promise<void>;
    };
};

export { AstroExpressiveCodeOptions, astroExpressiveCode, astroExpressiveCode as default };
