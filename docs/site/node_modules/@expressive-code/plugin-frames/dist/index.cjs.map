{"version":3,"sources":["../src/index.ts","../src/styles.ts","../src/utils.ts","../src/copy-js-module.ts"],"sourcesContent":["import { AttachedPluginData, ExpressiveCodePlugin, PluginTexts, replaceDelimitedValues } from '@expressive-code/core'\nimport { h, Result as HastEntity } from 'hastscript'\nimport { framesStyleSettings, getFramesBaseStyles } from './styles'\nimport {\n\textractFileNameFromCodeBlock,\n\tFrameType,\n\tframeTypeFromString,\n\tframeTypes,\n\tgetFileNameFromComment,\n\tisTerminalLanguage,\n\tLanguageGroups,\n\tLanguagesWithFencedFrontmatter,\n} from './utils'\nimport { getCopyJsModule } from './copy-js-module'\nexport { FramesStyleSettings } from './styles'\n\nexport interface PluginFramesOptions {\n\t/**\n\t * If `true` (which is the default), and no title was found in the code block's meta string,\n\t * the plugin will try to find and extract a comment line containing the code block file name\n\t * from the first 4 lines of the code.\n\t */\n\textractFileNameFromCode?: boolean | undefined\n\t/**\n\t * If `true` (which is the default), a \"Copy to clipboard\" button\n\t * will be shown for each code block.\n\t */\n\tshowCopyToClipboardButton?: boolean | undefined\n\t/**\n\t * If `true` (which is the default), the \"Copy to clipboard\" button of terminal window frames\n\t * will remove comment lines starting with `#` from the copied text.\n\t *\n\t * This is useful to reduce the copied text to the actual commands users need to run,\n\t * instead of also copying explanatory comments or instructions.\n\t */\n\tremoveCommentsWhenCopyingTerminalFrames?: boolean | undefined\n}\n\nexport const pluginFramesTexts = new PluginTexts({\n\tterminalWindowFallbackTitle: 'Terminal window',\n\tcopyButtonTooltip: 'Copy to clipboard',\n\tcopyButtonCopied: 'Copied!',\n})\n\npluginFramesTexts.addLocale('de', {\n\tterminalWindowFallbackTitle: 'Terminal-Fenster',\n\tcopyButtonTooltip: 'In die Zwischenablage kopieren',\n\tcopyButtonCopied: 'Kopiert!',\n})\n\nexport function pluginFrames(options: PluginFramesOptions = {}): ExpressiveCodePlugin {\n\t// Apply default settings\n\toptions = {\n\t\textractFileNameFromCode: true,\n\t\tshowCopyToClipboardButton: true,\n\t\tremoveCommentsWhenCopyingTerminalFrames: true,\n\t\t...options,\n\t}\n\treturn {\n\t\tname: 'Frames',\n\t\tstyleSettings: framesStyleSettings,\n\t\tbaseStyles: (context) => getFramesBaseStyles(context, options),\n\t\tjsModules: options.showCopyToClipboardButton ? [getCopyJsModule(`.expressive-code .copy button`)] : undefined,\n\t\thooks: {\n\t\t\tpreprocessMetadata: ({ codeBlock }) => {\n\t\t\t\tconst blockData = pluginFramesData.getOrCreateFor(codeBlock)\n\n\t\t\t\tcodeBlock.meta = replaceDelimitedValues(codeBlock.meta, ({ fullMatch, key, value }) => {\n\t\t\t\t\t// Handle titles in meta string\n\t\t\t\t\tif (key?.match(/^@?title$/i)) {\n\t\t\t\t\t\tblockData.title = value\n\t\t\t\t\t\treturn ''\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle frame types in meta string\n\t\t\t\t\tif (key?.match(/^@?frame(Type)?$/i)) {\n\t\t\t\t\t\tconst frameType = frameTypeFromString(value)\n\t\t\t\t\t\tif (frameType === undefined)\n\t\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t\t`Invalid frame type \\`${value}\\` found in code block meta string.\n\t\t\t\t\t\t\t\tValid frame types are: ${frameTypes.join(', ')}.`.replace(/\\s+/g, ' ')\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\tblockData.frameType = frameType\n\t\t\t\t\t\treturn ''\n\t\t\t\t\t}\n\n\t\t\t\t\t// Leave all other key-value pairs untouched\n\t\t\t\t\treturn fullMatch\n\t\t\t\t})\n\t\t\t},\n\t\t\tpreprocessCode: ({ codeBlock }) => {\n\t\t\t\tconst blockData = pluginFramesData.getOrCreateFor(codeBlock)\n\n\t\t\t\t// If the block data we collected while parsing the meta information\n\t\t\t\t// did not contain a title, the frame type wasn't set to \"none\",\n\t\t\t\t// and extracting file names from the code is enabled,\n\t\t\t\t// try to find and extract a title from the code\n\t\t\t\tif (blockData.title === undefined && blockData.frameType !== 'none' && options.extractFileNameFromCode) {\n\t\t\t\t\tblockData.title = extractFileNameFromCodeBlock(codeBlock)\n\t\t\t\t}\n\n\t\t\t\t// If we're supposed to auto-detect the code block's frame type,\n\t\t\t\t// and a terminal/shell language like \"sh\" or \"powershell\" was assigned to it,\n\t\t\t\t// we need to perform some extra checks. There are two possible cases:\n\t\t\t\t// - It's a script file (= to be rendered as an editor frame)\n\t\t\t\t// - It shows an interactive shell session (= terminal window frame)\n\t\t\t\tconst { frameType = 'auto' } = blockData\n\t\t\t\tif (frameType === 'auto' && isTerminalLanguage(codeBlock.language)) {\n\t\t\t\t\t// If we found a valid file name comment or shebang,\n\t\t\t\t\t// it's a script file and not a terminal session\n\t\t\t\t\tconst titleIsFileName = blockData.title && getFileNameFromComment(`// ${blockData.title}`, codeBlock.language)\n\t\t\t\t\tif (titleIsFileName || codeBlock.getLines(0, 4).some((line) => line.text.match(/^\\s*#!/))) {\n\t\t\t\t\t\tblockData.frameType = 'code'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tpostprocessRenderedBlock: ({ codeBlock, renderData, locale }) => {\n\t\t\t\t// Get text strings for the current locale\n\t\t\t\tconst texts = pluginFramesTexts.get(locale)\n\n\t\t\t\t// Retrieve information about the current block\n\t\t\t\tconst blockData = pluginFramesData.getOrCreateFor(codeBlock)\n\t\t\t\tconst { title: titleText, frameType = 'auto' } = blockData\n\t\t\t\tconst isTerminal = frameType === 'terminal' || (frameType === 'auto' && isTerminalLanguage(codeBlock.language))\n\n\t\t\t\t// TODO: Improve the ability to wrap long file paths into multiple lines\n\t\t\t\t// by inserting a line break opportunity after each slash\n\t\t\t\t// const titleHtml = decodeURIComponent(title).replace(/([\\\\/])/g, '$1<wbr/>')\n\n\t\t\t\t// If frameType is not \"none\" and a title was given, render it as a visible span.\n\t\t\t\t// Also render a visible (but empty) span for terminals without a title\n\t\t\t\t// to keep the same window caption line height.\n\t\t\t\tconst visibleTitle = (frameType !== 'none' && titleText) || isTerminal ? [h('span', { className: 'title' }, titleText || '')] : []\n\n\t\t\t\t// Otherwise, render a screen reader-only title for terminals\n\t\t\t\t// to clarify that the code block is a terminal window\n\t\t\t\tconst screenReaderTitle = !titleText && isTerminal ? [h('span', { className: 'sr-only' }, texts.terminalWindowFallbackTitle)] : []\n\n\t\t\t\tconst extraElements: HastEntity[] = []\n\n\t\t\t\t// If enabled, create a button to copy the code to the clipboard\n\t\t\t\tif (options.showCopyToClipboardButton) {\n\t\t\t\t\tlet codeToCopy = codeBlock.code\n\n\t\t\t\t\t// If enabled, remove comment lines starting with `#` from terminal frames\n\t\t\t\t\tif (options.removeCommentsWhenCopyingTerminalFrames && isTerminal) {\n\t\t\t\t\t\tcodeToCopy = codeToCopy.replace(/(?<=^|\\n)\\s*#.*($|\\n+)/g, '').trim()\n\t\t\t\t\t}\n\n\t\t\t\t\t// Replace all line breaks with a special character\n\t\t\t\t\t// because HAST does not encode them in attribute values\n\t\t\t\t\t// (which seems to work, but looks ugly in the HTML source)\n\t\t\t\t\tcodeToCopy = codeToCopy.replace(/\\n/g, '\\u007f')\n\n\t\t\t\t\textraElements.push(\n\t\t\t\t\t\th('div', { className: 'copy' }, [\n\t\t\t\t\t\t\th(\n\t\t\t\t\t\t\t\t'button',\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttitle: texts.copyButtonTooltip,\n\t\t\t\t\t\t\t\t\t'data-copied': texts.copyButtonCopied,\n\t\t\t\t\t\t\t\t\t'data-code': codeToCopy,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t[h('div')]\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t])\n\t\t\t\t\t)\n\t\t\t\t}\n\n\t\t\t\t// Wrap the code block in a figure element with helpful classes for styling\n\t\t\t\trenderData.blockAst = h(\n\t\t\t\t\t'figure',\n\t\t\t\t\t{\n\t\t\t\t\t\tclassName: [\n\t\t\t\t\t\t\t'frame',\n\t\t\t\t\t\t\t// If the code block is a terminal, add the `is-terminal` class\n\t\t\t\t\t\t\t...(isTerminal ? ['is-terminal'] : []),\n\t\t\t\t\t\t\t// If the code block has a title, add the `has-title` class\n\t\t\t\t\t\t\t...(frameType !== 'none' && titleText ? ['has-title'] : []),\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t\t[\n\t\t\t\t\t\th('figcaption', { className: 'header' }, [...visibleTitle, ...screenReaderTitle]),\n\t\t\t\t\t\t// Render the original code block\n\t\t\t\t\t\trenderData.blockAst,\n\t\t\t\t\t\t// Add any extra elements (e.g. copy button)\n\t\t\t\t\t\t...extraElements,\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t},\n\t\t},\n\t}\n}\n\nexport interface PluginFramesData {\n\ttitle?: string | undefined\n\tframeType?: FrameType | undefined\n}\n\nexport const pluginFramesData = new AttachedPluginData<PluginFramesData>(() => ({}))\n\nexport { LanguageGroups, LanguagesWithFencedFrontmatter }\n","import { PluginStyleSettings, ResolverContext, multiplyAlpha, onBackground, setLuminance } from '@expressive-code/core'\nimport { PluginFramesOptions } from '.'\n\nexport interface FramesStyleSettings {\n\t/**\n\t * The color to use for the shadow of the frame.\n\t * @default\n\t * ({ theme, resolveSetting }) => theme.colors['widget.shadow'] || multiplyAlpha(resolveSetting('borderColor'), 0.75)\n\t */\n\tshadowColor: string\n\t/**\n\t * The CSS value for the box shadow of the frame.\n\t * @default\n\t * ({ resolveSetting }) => `0.1rem 0.1rem 0.2rem ${resolveSetting('frames.shadowColor')}`\n\t */\n\tframeBoxShadowCssValue: string\n\t/**\n\t * The CSS `background` value for the active editor tab.\n\t * @default\n\t * ({ theme }) => theme.colors['tab.activeBackground']\n\t */\n\teditorActiveTabBackground: string\n\t/**\n\t * The foreground color of the active editor tab.\n\t * @default\n\t * ({ theme }) => theme.colors['tab.activeForeground']\n\t */\n\teditorActiveTabForeground: string\n\t/**\n\t * The border color of the active editor tab.\n\t * @default 'transparent'\n\t */\n\teditorActiveTabBorderColor: string\n\t/**\n\t * The height of the indicator lines highlighting the active editor tab.\n\t * These are colorful lines that appear at the top and/or bottom of the active tab.\n\t *\n\t * The individual line colors can be set in {@link editorActiveTabIndicatorTopColor} and\n\t * {@link editorActiveTabIndicatorBottomColor}.\n\t *\n\t * @default\n\t * ({ resolveSetting }) => resolveSetting('borderWidth')\n\t */\n\teditorActiveTabIndicatorHeight: string\n\t/**\n\t * The color of the indicator line displayed at the top border of the active editor tab.\n\t * @default\n\t * ({ theme }) => theme.colors['tab.activeBorderTop']\n\t */\n\teditorActiveTabIndicatorTopColor: string\n\t/**\n\t * The color of the indicator line displayed at the bottom border of the active editor tab.\n\t * @default\n\t * ({ theme }) => theme.colors['tab.activeBorder']\n\t */\n\teditorActiveTabIndicatorBottomColor: string\n\t/**\n\t * The inline margin (= left margin in horizontal writing mode) to apply inside the tab bar\n\t * before the first editor tab.\n\t * @default '0'\n\t */\n\teditorTabsMarginInlineStart: string\n\t/**\n\t * The block margin (= top margin in horizontal writing mode) to apply inside the tab bar\n\t * before the editor tabs.\n\t * @default '0'\n\t */\n\teditorTabsMarginBlockStart: string\n\t/**\n\t * The border radius to apply to the outer corners of editor tabs.\n\t * @default\n\t * ({ resolveSetting }) => resolveSetting('borderRadius')\n\t */\n\teditorTabBorderRadius: string\n\t/**\n\t * The CSS `background` value of the editor tab bar.\n\t * @default\n\t * ({ theme }) => theme.colors['editorGroupHeader.tabsBackground']\n\t */\n\teditorTabBarBackground: string\n\t/**\n\t * The border color of the editor tab bar.\n\t * @default\n\t * ({ resolveSetting }) => resolveSetting('borderColor')\n\t */\n\teditorTabBarBorderColor: string\n\t/**\n\t * The color of the bottom border of the editor tab bar. This is an additional border\n\t * that can be used to display a line between the editor tab bar and the code contents.\n\t * @default\n\t * ({ theme }) => theme.colors['editorGroupHeader.tabsBorder'] || 'transparent'\n\t */\n\teditorTabBarBorderBottomColor: string\n\t/**\n\t * The background color of the code editor.\n\t * This color is used for the \"code\" frame type.\n\t * @default\n\t * ({ resolveSetting }) => resolveSetting('codeBackground')\n\t */\n\teditorBackground: string\n\t/**\n\t * The color of the three dots in the terminal title bar.\n\t * @default\n\t * ({ resolveSetting }) => resolveSetting('frames.terminalTitlebarForeground')\n\t */\n\tterminalTitlebarDotsForeground: string\n\t/**\n\t * The opacity of the three dots in the terminal title bar.\n\t * @default '0.15'\n\t */\n\tterminalTitlebarDotsOpacity: string\n\t/**\n\t * The background color of the terminal title bar.\n\t * @default\n\t * ({ theme }) => theme.colors['titleBar.activeBackground'] || theme.colors['editorGroupHeader.tabsBackground']\n\t */\n\tterminalTitlebarBackground: string\n\t/**\n\t * The foreground color of the terminal title bar.\n\t * @default\n\t * ({ theme }) => theme.colors['titleBar.activeForeground']\n\t */\n\tterminalTitlebarForeground: string\n\t/**\n\t * The color of the border between the terminal title bar and the terminal contents.\n\t * @default\n\t * ({ theme, resolveSetting }) =>\n\t *   theme.colors['titleBar.border'] ||\n\t *   onBackground(resolveSetting('borderColor'), theme.type === 'dark' ? '#000000bf' : '#ffffffbf')\n\t */\n\tterminalTitlebarBorderBottomColor: string\n\t/**\n\t * The background color of the terminal window.\n\t * This color is used for the \"terminal\" frame type.\n\t * @default\n\t * ({ theme }) => theme.colors['terminal.background']\n\t */\n\tterminalBackground: string\n\t/**\n\t * The background color of the copy button.\n\t * This color is modified by the state-dependent opacity values specified in\n\t * {@link inlineButtonBackgroundIdleOpacity}, {@link inlineButtonBackgroundHoverOrFocusOpacity}\n\t * and {@link inlineButtonBackgroundActiveOpacity}.\n\t * @default\n\t * ({ resolveSetting }) => resolveSetting('frames.inlineButtonForeground')\n\t */\n\tinlineButtonBackground: string\n\t/**\n\t * The opacity of the copy button background when idle.\n\t * @default '0'\n\t */\n\tinlineButtonBackgroundIdleOpacity: string\n\t/**\n\t * The opacity of the copy button background when hovered or focused.\n\t * @default '0.2'\n\t */\n\tinlineButtonBackgroundHoverOrFocusOpacity: string\n\t/**\n\t * The opacity of the copy button background when pressed.\n\t * @default '0.3'\n\t */\n\tinlineButtonBackgroundActiveOpacity: string\n\t/**\n\t * The foreground color of the copy button.\n\t * @default\n\t * ({ resolveSetting }) => resolveSetting('codeForeground')\n\t */\n\tinlineButtonForeground: string\n\t/**\n\t * The border color of the copy button.\n\t * @default\n\t * ({ resolveSetting }) => resolveSetting('frames.inlineButtonForeground')\n\t */\n\tinlineButtonBorder: string\n\t/**\n\t * The opacity of the copy button border.\n\t * @default '0.4'\n\t */\n\tinlineButtonBorderOpacity: string\n\t/**\n\t * The background color of the tooltip shown after successfully copying the code.\n\t * @default\n\t * ({ theme }) => setLuminance(theme.colors['terminal.ansiGreen'] || '#0dbc79', 0.18)\n\t */\n\ttooltipSuccessBackground: string\n\t/**\n\t * The foreground color of the tooltip shown after successfully copying the code.\n\t * @default 'white'\n\t */\n\ttooltipSuccessForeground: string\n}\n\ndeclare module '@expressive-code/core' {\n\texport interface StyleSettings {\n\t\tframes: FramesStyleSettings\n\t}\n}\n\nexport const framesStyleSettings = new PluginStyleSettings({\n\tdefaultValues: {\n\t\tframes: {\n\t\t\tshadowColor: ({ theme, resolveSetting }) => theme.colors['widget.shadow'] || multiplyAlpha(resolveSetting('borderColor'), 0.75),\n\t\t\tframeBoxShadowCssValue: ({ resolveSetting }) => `0.1rem 0.1rem 0.2rem ${resolveSetting('frames.shadowColor')}`,\n\t\t\teditorActiveTabBackground: ({ theme }) => theme.colors['tab.activeBackground'],\n\t\t\teditorActiveTabForeground: ({ theme }) => theme.colors['tab.activeForeground'],\n\t\t\teditorActiveTabBorderColor: 'transparent',\n\t\t\teditorActiveTabIndicatorHeight: ({ resolveSetting }) => resolveSetting('borderWidth'),\n\t\t\teditorActiveTabIndicatorTopColor: ({ theme }) => theme.colors['tab.activeBorderTop'],\n\t\t\teditorActiveTabIndicatorBottomColor: ({ theme }) => theme.colors['tab.activeBorder'],\n\t\t\teditorTabsMarginInlineStart: '0',\n\t\t\teditorTabsMarginBlockStart: '0',\n\t\t\teditorTabBorderRadius: ({ resolveSetting }) => resolveSetting('borderRadius'),\n\t\t\teditorTabBarBackground: ({ theme }) => theme.colors['editorGroupHeader.tabsBackground'],\n\t\t\teditorTabBarBorderColor: ({ resolveSetting }) => resolveSetting('borderColor'),\n\t\t\teditorTabBarBorderBottomColor: ({ theme }) => theme.colors['editorGroupHeader.tabsBorder'] || 'transparent',\n\t\t\teditorBackground: ({ resolveSetting }) => resolveSetting('codeBackground'),\n\t\t\tterminalTitlebarDotsForeground: ({ resolveSetting }) => resolveSetting('frames.terminalTitlebarForeground'),\n\t\t\tterminalTitlebarDotsOpacity: '0.15',\n\t\t\tterminalTitlebarBackground: ({ theme }) => theme.colors['titleBar.activeBackground'] || theme.colors['editorGroupHeader.tabsBackground'],\n\t\t\tterminalTitlebarForeground: ({ theme }) => theme.colors['titleBar.activeForeground'],\n\t\t\tterminalTitlebarBorderBottomColor: ({ theme, resolveSetting }) =>\n\t\t\t\ttheme.colors['titleBar.border'] || onBackground(resolveSetting('borderColor'), theme.type === 'dark' ? '#000000bf' : '#ffffffbf'),\n\t\t\tterminalBackground: ({ theme }) => theme.colors['terminal.background'],\n\t\t\tinlineButtonBackground: ({ resolveSetting }) => resolveSetting('frames.inlineButtonForeground'),\n\t\t\tinlineButtonBackgroundIdleOpacity: '0',\n\t\t\tinlineButtonBackgroundHoverOrFocusOpacity: '0.2',\n\t\t\tinlineButtonBackgroundActiveOpacity: '0.3',\n\t\t\tinlineButtonForeground: ({ resolveSetting }) => resolveSetting('codeForeground'),\n\t\t\tinlineButtonBorder: ({ resolveSetting }) => resolveSetting('frames.inlineButtonForeground'),\n\t\t\tinlineButtonBorderOpacity: '0.4',\n\t\t\ttooltipSuccessBackground: ({ theme }) => setLuminance(theme.colors['terminal.ansiGreen'] || '#0dbc79', 0.18),\n\t\t\ttooltipSuccessForeground: 'white',\n\t\t},\n\t},\n})\n\nexport function getFramesBaseStyles({ cssVar }: ResolverContext, options: PluginFramesOptions) {\n\tconst dotsSvg = [\n\t\t`<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 60 16' preserveAspectRatio='xMidYMid meet'>`,\n\t\t`<circle cx='8' cy='8' r='8'/>`,\n\t\t`<circle cx='30' cy='8' r='8'/>`,\n\t\t`<circle cx='52' cy='8' r='8'/>`,\n\t\t`</svg>`,\n\t].join('')\n\tconst escapedDotsSvg = dotsSvg.replace(/</g, '%3C').replace(/>/g, '%3E')\n\tconst terminalTitlebarDots = `url(\"data:image/svg+xml,${escapedDotsSvg}\")`\n\n\tconst copySvg = [\n\t\t`<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='black' stroke-width='1.75'>`,\n\t\t`<path d='M3 19a2 2 0 0 1-1-2V2a2 2 0 0 1 1-1h13a2 2 0 0 1 2 1'/>`,\n\t\t`<rect x='6' y='5' width='16' height='18' rx='1.5' ry='1.5'/>`,\n\t\t`</svg>`,\n\t].join('')\n\tconst escapedCopySvg = copySvg.replace(/</g, '%3C').replace(/>/g, '%3E')\n\tconst copyToClipboard = `url(\"data:image/svg+xml,${escapedCopySvg}\")`\n\n\tconst tabBarBackground = [\n\t\t`linear-gradient(to top, ${cssVar('frames.editorTabBarBorderBottomColor')} ${cssVar('borderWidth')}, transparent ${cssVar('borderWidth')})`,\n\t\t`linear-gradient(${cssVar('frames.editorTabBarBackground')}, ${cssVar('frames.editorTabBarBackground')})`,\n\t].join(',')\n\n\tconst frameStyles = `.frame {\n\t\tall: unset;\n\t\tposition: relative;\n\t\tdisplay: block;\n\t\t--header-border-radius: calc(${cssVar('borderRadius')} + ${cssVar('borderWidth')});\n\t\t--tab-border-radius: calc(${cssVar('frames.editorTabBorderRadius')} + ${cssVar('borderWidth')});\n\t\t--button-spacing: 0.4rem;\n\t\t--code-background: ${cssVar('frames.editorBackground')};\n\t\tborder-radius: var(--header-border-radius);\n\t\tbox-shadow: ${cssVar('frames.frameBoxShadowCssValue')};\n\n\t\t.header {\n\t\t\tdisplay: none;\n\t\t\tz-index: 1;\n\t\t\tposition: relative;\n\n\t\t\tborder-radius: var(--header-border-radius) var(--header-border-radius) 0 0;\n\t\t}\n\n\t\t/* Styles to apply if we have a title bar or tab bar */\n\t\t&.has-title,\n\t\t&.is-terminal {\n\t\t\t& pre, & code {\n\t\t\t\tborder-top: none;\n\t\t\t\tborder-top-left-radius: 0;\n\t\t\t\tborder-top-right-radius: 0;\n\t\t\t}\n\t\t}\n\n\t\t/* Prevent empty window titles from collapsing in height */\n\t\t.title:empty:before {\n\t\t\tcontent: '\\\\a0';\n\t\t}\n\n\t\t/* Editor tab bar */\n\t\t&.has-title:not(.is-terminal) {\n\t\t\t--button-spacing: calc(1.9rem + 2 * (${cssVar('uiPaddingBlock')} + ${cssVar('frames.editorActiveTabIndicatorHeight')}));\n\n\t\t\t/* Active editor tab */\n\t\t\t& .title {\n\t\t\t\tposition: relative;\n\t\t\t\tcolor: ${cssVar('frames.editorActiveTabForeground')};\n\t\t\t\tbackground: ${cssVar('frames.editorActiveTabBackground')};\n\t\t\t\tbackground-clip: padding-box;\n\t\t\t\tmargin-block-start: ${cssVar('frames.editorTabsMarginBlockStart')};\n\t\t\t\tpadding: calc(${cssVar('uiPaddingBlock')} + ${cssVar('frames.editorActiveTabIndicatorHeight')}) ${cssVar('uiPaddingInline')};\n\t\t\t\tborder: ${cssVar('borderWidth')} solid ${cssVar('frames.editorActiveTabBorderColor')};\n\t\t\t\tborder-radius: var(--tab-border-radius) var(--tab-border-radius) 0 0;\n\t\t\t\tborder-bottom: none;\n\t\t\t\toverflow: hidden;\n\n\t\t\t\t&::after {\n\t\t\t\t\tcontent: '';\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tpointer-events: none;\n\t\t\t\t\tinset: 0;\n\t\t\t\t\tborder-top: ${cssVar('frames.editorActiveTabIndicatorHeight')} solid ${cssVar('frames.editorActiveTabIndicatorTopColor')};\n\t\t\t\t\tborder-bottom: ${cssVar('frames.editorActiveTabIndicatorHeight')} solid ${cssVar('frames.editorActiveTabIndicatorBottomColor')};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Tab bar background */\n\t\t\t& .header {\n\t\t\t\tdisplay: flex;\n\n\t\t\t\tbackground: ${tabBarBackground};\n\t\t\t\tbackground-repeat: no-repeat;\n\n\t\t\t\tpadding-inline-start: ${cssVar('frames.editorTabsMarginInlineStart')};\n\n\t\t\t\t&::before {\n\t\t\t\t\tcontent: '';\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tpointer-events: none;\n\t\t\t\t\tinset: 0;\n\t\t\t\t\tborder: ${cssVar('borderWidth')} solid ${cssVar('frames.editorTabBarBorderColor')};\n\t\t\t\t\tborder-radius: inherit;\n\t\t\t\t\tborder-bottom: none;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* Terminal window */\n\t\t&.is-terminal {\n\t\t\t--button-spacing: calc(1.9rem + ${cssVar('borderWidth')} + 2 * ${cssVar('uiPaddingBlock')});\n\t\t\t--code-background: ${cssVar('frames.terminalBackground')};\n\n\t\t\t/* Terminal title bar */\n\t\t\t& .header {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\t\t\t\tpadding-block: ${cssVar('uiPaddingBlock')};\n\t\t\t\tpadding-block-end: calc(${cssVar('uiPaddingBlock')} + ${cssVar('borderWidth')});\n\t\t\t\tposition: relative;\n\n\t\t\t\tfont-weight: 500;\n\t\t\t\tletter-spacing: 0.025ch;\n\n\t\t\t\tcolor: ${cssVar('frames.terminalTitlebarForeground')};\n\t\t\t\tbackground: ${cssVar('frames.terminalTitlebarBackground')};\n\t\t\t\tborder: ${cssVar('borderWidth')} solid ${cssVar('borderColor')};\n\t\t\t\tborder-bottom: none;\n\n\t\t\t\t/* Display three dots at the left side of the header */\n\t\t\t\t&::before {\n\t\t\t\t\tcontent: '';\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tpointer-events: none;\n\t\t\t\t\tleft: ${cssVar('uiPaddingInline')};\n\t\t\t\t\twidth: 2.1rem;\n\t\t\t\t\theight: ${(2.1 / 60) * 16}rem;\n\t\t\t\t\tline-height: 0;\n\t\t\t\t\tbackground-color: ${cssVar('frames.terminalTitlebarDotsForeground')};\n\t\t\t\t\topacity: ${cssVar('frames.terminalTitlebarDotsOpacity')};\n\t\t\t\t\t-webkit-mask-image: ${terminalTitlebarDots};\n\t\t\t\t\t-webkit-mask-repeat: no-repeat;\n\t\t\t\t\tmask-image: ${terminalTitlebarDots};\n\t\t\t\t\tmask-repeat: no-repeat;\n\t\t\t\t}\n\t\t\t\t/* Display a border below the header */\n\t\t\t\t&::after {\n\t\t\t\t\tcontent: '';\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\tpointer-events: none;\n\t\t\t\t\tinset: 0;\n\t\t\t\t\tborder-bottom: ${cssVar('borderWidth')} solid ${cssVar('frames.terminalTitlebarBorderBottomColor')};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/* Code */\n\t\t& pre {\n\t\t\tbackground: var(--code-background);\n\t\t}\n\t}`\n\n\tconst copyButtonStyles = `.copy {\n\t\tdisplay: flex;\n\t\tgap: 0.25rem;\n\t\tflex-direction: row;\n\t\tposition: absolute;\n\t\tinset-block-start: calc(${cssVar('borderWidth')} + var(--button-spacing));\n\t\tinset-inline-end: calc(${cssVar('borderWidth')} + ${cssVar('uiPaddingInline')} / 2);\n\n\t\t/* RTL support: Code is always LTR, so the inline copy button\n\t\t   must match this to avoid overlapping the start of lines */\n\t\tdirection: ltr;\n\t\tunicode-bidi: isolate;\n\n\t\tbutton {\n\t\t\tposition: relative;\n\t\t\talign-self: flex-end;\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t\tborder: none;\n\t\t\tborder-radius: 0.2rem;\n\t\t\tz-index: 1;\n\t\t\tcursor: pointer;\n\n\t\t\ttransition-property: opacity, background, border-color;\n\t\t\ttransition-duration: 0.2s;\n\t\t\ttransition-timing-function: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n\n\t\t\t/* Mobile-first styles: Make the button visible and tappable */\n\t\t\twidth: 2.5rem;\n\t\t\theight: 2.5rem;\n\t\t\tbackground: var(--code-background);\n\t\t\topacity: 0.75;\n\n\t\t\tdiv {\n\t\t\t\tposition: absolute;\n\t\t\t\tinset: 0;\n\t\t\t\tborder-radius: inherit;\n\n\t\t\t\tbackground: ${cssVar('frames.inlineButtonBackground')};\n\t\t\t\topacity: ${cssVar('frames.inlineButtonBackgroundIdleOpacity')};\n\n\t\t\t\ttransition-property: inherit;\n\t\t\t\ttransition-duration: inherit;\n\t\t\t\ttransition-timing-function: inherit;\n\t\t\t}\n\n\t\t\t&::before {\n\t\t\t\tcontent: '';\n\t\t\t\tposition: absolute;\n\t\t\t\tpointer-events: none;\n\t\t\t\tinset: 0;\n\t\t\t\tborder-radius: inherit;\n\t\t\t\tborder: ${cssVar('borderWidth')} solid ${cssVar('frames.inlineButtonBorder')};\n\t\t\t\topacity: ${cssVar('frames.inlineButtonBorderOpacity')};\n\t\t\t}\n\t\t\t\n\t\t\t&::after {\n\t\t\t\tcontent: '';\n\t\t\t\tposition: absolute;\n\t\t\t\tpointer-events: none;\n\t\t\t\tinset: 0;\n\t\t\t\tbackground-color: ${cssVar('frames.inlineButtonForeground')};\n\t\t\t\t-webkit-mask-image: ${copyToClipboard};\n\t\t\t\t-webkit-mask-repeat: no-repeat;\n\t\t\t\tmask-image: ${copyToClipboard};\n\t\t\t\tmask-repeat: no-repeat;\n\t\t\t\tmargin: 0.475rem;\n\t\t\t\tline-height: 0;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t\tOn hover or focus, make the button fully opaque\n\t\t\t\tand set hover/focus background opacity\n\t\t\t*/\n\t\t\t&:hover, &:focus:focus-visible {\n\t\t\t\topacity: 1;\n\t\t\t\tdiv {\n\t\t\t\t\topacity: ${cssVar('frames.inlineButtonBackgroundHoverOrFocusOpacity')};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* On press, set active background opacity */\n\t\t\t&:active {\n\t\t\t\topacity: 1;\n\t\t\t\tdiv {\n\t\t\t\t\topacity: ${cssVar('frames.inlineButtonBackgroundActiveOpacity')};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t.feedback {\n\t\t\t--tooltip-arrow-size: 0.35rem;\n\t\t\t--tooltip-bg: ${cssVar('frames.tooltipSuccessBackground')};\n\t\t\tcolor: ${cssVar('frames.tooltipSuccessForeground')};\n\t\t\tpointer-events: none;\n\t\t\tuser-select: none;\n\t\t\t-webkit-user-select: none;\n\t\t\tposition: relative;\n\t\t\talign-self: center;\n\t\t\tbackground-color: var(--tooltip-bg);\n\t\t\tz-index: 99;\n\t\t\tpadding: 0.125rem 0.75rem;\n\t\t\tborder-radius: 0.2rem;\n\t\t\tmargin-inline-end: var(--tooltip-arrow-size);\n\t\t\topacity: 0;\n\t\t\ttransition-property: opacity, transform;\n\t\t\ttransition-duration: 0.2s;\n\t\t\ttransition-timing-function: ease-in-out;\n\t\t\ttransform: translate3d(0, 0.25rem, 0);\n\n\t\t\t&::after {\n\t\t\t\tcontent: '';\n\t\t\t\tposition: absolute;\n\t\t\t\tpointer-events: none;\n\t\t\t\ttop: calc(50% - var(--tooltip-arrow-size));\n\t\t\t\tinset-inline-end: calc(-2 * (var(--tooltip-arrow-size) - 0.5px));\n\t\t\t\tborder: var(--tooltip-arrow-size) solid transparent;\n\t\t\t\tborder-inline-start-color: var(--tooltip-bg);\n\t\t\t}\n\n\t\t\t&.show {\n\t\t\t\topacity: 1;\n\t\t\t\ttransform: translate3d(0, 0, 0);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t@media (hover: hover) {\n\t\t/* If a mouse is available, hide the button by default and make it smaller */\n\t\t.copy button {\n\t\t\topacity: 0;\n\t\t\twidth: 2rem;\n\t\t\theight: 2rem;\n\t\t}\n\n\t\t/* Reveal the non-hovered button in the following cases:\n\t\t\t- when the frame is hovered\n\t\t\t- when a sibling inside the frame is focused\n\t\t\t- when the copy button shows a visible feedback message\n\t\t*/\n\t\t.frame:hover .copy button:not(:hover),\n\t\t.frame:focus-within :focus-visible ~ .copy button:not(:hover),\n\t\t.frame .copy .feedback.show ~ button:not(:hover) {\n\t\t\topacity: 0.75;\n\t\t}\n\t}`\n\n\tconst styles = [\n\t\t// Always add base frame styles\n\t\tframeStyles,\n\t\t// Add copy button styles if enabled\n\t\toptions.showCopyToClipboardButton ? copyButtonStyles : '',\n\t]\n\n\treturn styles.join('\\n')\n}\n","import type { ExpressiveCodeBlock } from '@expressive-code/core'\n\nexport const frameTypes = ['code', 'terminal', 'none', 'auto'] as const\n\nexport type FrameType = (typeof frameTypes)[number]\n\n/**\n * If the given input string represents a valid frame type,\n * converts it to a {@link FrameType} and returns it.\n *\n * Otherwise, returns `undefined`.\n */\nexport function frameTypeFromString(input: string) {\n\t// Support an empty string as alias for \"none\"\n\tif (input === '') input = 'none'\n\n\t// Fix common mistakes\n\tif (input === 'editor') input = 'code'\n\tif (input === 'shell') input = 'terminal'\n\n\t// Return either the converted type or undefined\n\tconst frameType = input as FrameType\n\treturn frameTypes.includes(frameType) ? frameType : undefined\n}\n\nexport const LanguageGroups = {\n\tcode: ['astro', 'cjs', 'htm', 'html', 'js', 'jsx', 'mjs', 'svelte', 'ts', 'tsx', 'typescript', 'vb', 'vue', 'vue-html'],\n\tterminal: ['ansi', 'bash', 'bat', 'batch', 'cmd', 'console', 'powershell', 'ps', 'ps1', 'psd1', 'psm1', 'sh', 'shell', 'shellscript', 'shellsession', 'zsh'],\n\tdata: ['csv', 'env', 'ini', 'json', 'toml', 'xml', 'yaml', 'yml'],\n\tstyles: ['css', 'less', 'sass', 'scss', 'styl', 'stylus', 'xsl'],\n\ttextContent: ['markdown', 'md', 'mdx'],\n}\n\nexport const LanguagesWithFencedFrontmatter = ['astro', 'markdown', 'md', 'mdx', 'toml', 'yaml', 'yml']\n\nexport function isTerminalLanguage(language: string) {\n\treturn LanguageGroups.terminal.includes(language)\n}\n\nconst getFileNameCommentRegExpString = () =>\n\t[\n\t\t// Start of line\n\t\t`^`,\n\t\t// Optional whitespace\n\t\t`\\\\s*`,\n\t\t// Mandatory comment start: `//`, `#` (but not `#!`), `<!--` or `/*`\n\t\t`(?://|#(?!!)|<!--|/\\\\*)`,\n\t\t// Optional whitespace\n\t\t`\\\\s*`,\n\t\t// Optional prefix before the file name:\n\t\t// - This is intended to match strings like `File name:` or `Example :`,\n\t\t//   but not Windows drive letters like `C:`,\n\t\t//   or URL protocols like `https:`\n\t\t// - We therefore expect the prefix to begin with any sequence of characters\n\t\t//   not starting with a letter + colon (to rule out Windows drive letters)\n\t\t// - The prefix must then be followed by:\n\t\t//   - a Japanese colon (`\\\\uff1a`), or\n\t\t//   - a regular colon (`:`) not followed by `//` (to rule out URL protocols)\n\t\t`(?:((?![a-z]:).*?)(?:\\\\uff1a|:(?!//)))?`,\n\t\t// Optional whitespace\n\t\t`\\\\s*`,\n\t\t// Capture the file name\n\t\t`(`,\n\t\t// Optional Windows drive letter\n\t\t`(?:[a-z]:)?`,\n\t\t// Optional sequence of characters allowed in file paths\n\t\t`[\\\\w./~%[\\\\]\\\\\\\\-]*`,\n\t\t// Optional dot and supported file extension\n\t\t`(?:\\\\.(?:${Object.values(LanguageGroups).flat().sort().join('|')}))?`,\n\t\t// End of file name capture\n\t\t`)`,\n\t\t// Optional whitespace\n\t\t`\\\\s*`,\n\t\t// Optional HTML or JS/CSS comment end (`-->` or `*/`)\n\t\t`(?:-->|\\\\*/)?`,\n\t\t// Optional whitespace\n\t\t`\\\\s*`,\n\t\t// End of line\n\t\t`$`,\n\t].join('')\n\nlet fileNameCommentRegExp: RegExp | undefined\n\n/**\n * Checks if the given source code line is a comment that contains a file name\n * for the code snippet.\n *\n * If the syntax highlighting language is contained in our known language groups,\n * only allows file names with extensions that belong to the same language group.\n */\nexport function getFileNameFromComment(line: string, lang: string): string | undefined {\n\tif (fileNameCommentRegExp === undefined) {\n\t\tfileNameCommentRegExp = new RegExp(getFileNameCommentRegExpString(), 'i')\n\t}\n\tconst matches = fileNameCommentRegExp.exec(line)\n\tconst textBeforeFileName = matches?.[1] ?? ''\n\tconst possibleFileName = matches?.[2]\n\tif (!possibleFileName) return\n\n\t// Ignore strings that only consist of special characters (dots, path separators, etc.)\n\tif (!possibleFileName.match(/[^.:/\\\\~]/)) return\n\n\t// Ignore strings starting with two or more dots not followed by a path separator\n\tif (possibleFileName.match(/^\\.{2,}(?!\\/|\\\\)/)) return\n\n\t// Check if the syntax highlighting language is contained in our known language groups,\n\t// and determine the extension of the extracted file name (if any)\n\tconst languageGroup = Object.values(LanguageGroups).find((group) => group.includes(lang))\n\tconst fileNameWithoutPath = possibleFileName.replace(/^.*[/\\\\]/, '')\n\tconst fileExt = fileNameWithoutPath.match(/\\.([^.]+)$/)?.[1]\n\n\t// Check if the file name has one or more typical file name patterns:\n\t// - It begins with any of these and is followed by at least one more character:\n\t//   - `/` (Unix path separator)\n\t//   - `\\` (Windows path separator)\n\t//   - `./` or `.\\`) (current directory)\n\t//   - `~` (home directory)\n\t//   - `[a-z]:` (Windows drive letter)\n\t// - It has a file name part starting with a dot (e.g. `some/path/.gitignore`)\n\t// - It looks like a separated path (see below for details)\n\tconst hasTypicalFileNameBeginning = possibleFileName.match(/^(\\/|\\\\|\\.[/\\\\]|~|[a-z]:).+/i)\n\tconst hasFileNameStartingWithDot = fileNameWithoutPath.startsWith('.')\n\tconst looksLikeSeparatedPath =\n\t\t// Contains path separators\n\t\tpossibleFileName.match(/[/\\\\]/) &&\n\t\t// Also contains other characters (except path separators, numbers and dots)\n\t\tpossibleFileName.match(/[^/\\\\0-9.]/) &&\n\t\t// Does not contain spaces\n\t\t!possibleFileName.match(/\\s/) &&\n\t\t// Is all lowercase\n\t\tpossibleFileName === possibleFileName.toLowerCase()\n\tconst hasTypicalFileNamePattern = hasTypicalFileNameBeginning || hasFileNameStartingWithDot || looksLikeSeparatedPath\n\n\t// Accept anything that looks like a file name if at least one of these conditions is true:\n\t// - the file name is the only text in the comment\n\t// - we're in the terminal language group (where extensions are often missing or unknown)\n\tif (hasTypicalFileNamePattern && (!textBeforeFileName.length || languageGroup === LanguageGroups.terminal)) {\n\t\treturn possibleFileName\n\t}\n\n\t// Ignore the extracted file name if it doesn't have an extension,\n\t// or if its extension does not belong to the same language group\n\t// (e.g. JS code containing a CSS file name in a comment)\n\tif (!fileExt || (languageGroup && !languageGroup.includes(fileExt))) return\n\n\treturn possibleFileName\n}\n\n/**\n * Attempts to find and extract a file name from a comment on the first 4 lines of the code block.\n *\n * If a valid file name comment is found, it gets removed from the code block\n * and some cleanup work is performed on the surrounding lines:\n * - If the code block's language supports frontmatter, and the comment was located\n *   in a frontmatter block that has now become empty, the empty frontmatter block gets removed\n * - If the line following the removed comment (or removed frontmatter block) is empty,\n *   it gets removed as well\n *\n * @returns the extracted file name, or `undefined` if no valid file name comment was found\n */\nexport function extractFileNameFromCodeBlock(codeBlock: ExpressiveCodeBlock): string | undefined {\n\t// Check the first 4 lines of the code for a file name comment\n\tlet extractedFileName: string | undefined = undefined\n\tlet lineIdx = codeBlock.getLines(0, 4).findIndex((line) => {\n\t\textractedFileName = getFileNameFromComment(line.text, codeBlock.language)\n\t\treturn !!extractedFileName\n\t})\n\n\t// Abort if we didn't find a valid file name comment\n\tif (!extractedFileName) return\n\n\t// We found a file name comment, so remove it from the code\n\tcodeBlock.deleteLine(lineIdx)\n\n\t// If the block's language supports frontmatter, and the removed comment\n\t// caused its frontmatter block to become empty, remove the empty block\n\tif (LanguagesWithFencedFrontmatter.includes(codeBlock.language)) {\n\t\tconst openingFence = lineIdx > 0 ? codeBlock.getLine(lineIdx - 1)?.text.trim() : undefined\n\t\tconst closingFence = codeBlock.getLine(lineIdx)?.text.trim()\n\t\tconst isFrontmatterEmptyNow = openingFence === closingFence && ['---', '+++'].includes(openingFence ?? '')\n\t\tif (isFrontmatterEmptyNow) {\n\t\t\tlineIdx--\n\t\t\tcodeBlock.deleteLine(lineIdx)\n\t\t\tcodeBlock.deleteLine(lineIdx)\n\t\t}\n\t}\n\n\t// If the following line is empty, remove it as well\n\tif (codeBlock.getLine(lineIdx)?.text.trim().length === 0) {\n\t\tcodeBlock.deleteLine(lineIdx)\n\t}\n\n\treturn extractedFileName\n}\n","/**\n * Workaround code for cases in which the Clipboard API is not available.\n */\nconst domCopy = [\n\t// Define copy function\n\t`function domCopy(text) {`,\n\t// Create a new DOM element to copy from and append it to the document,\n\t// but make sure it's not visible and does not cause reflow\n\t`let n = document.createElement('pre');\n\tObject.assign(n.style, {\n\t\topacity: '0',\n\t\tpointerEvents: 'none',\n\t\tposition: 'absolute',\n\t\toverflow: 'hidden',\n\t\tleft: '0',\n\t\ttop: '0',\n\t\twidth: '20px',\n\t\theight: '20px',\n\t\twebkitUserSelect: 'auto',\n\t\tuserSelect: 'all'\n\t});\n\tn.ariaHidden = 'true';\n\tn.textContent = text;\n\tdocument.body.appendChild(n);`,\n\t// Select the DOM element's contents\n\t`let r = document.createRange();\n\tr.selectNode(n);\n\tlet s = getSelection();\n\ts.removeAllRanges();\n\ts.addRange(r);`,\n\t// Copy the selection to the clipboard\n\t`let ok = false;\n\ttry {\n\t\tok = document.execCommand('copy');\n\t} finally {\n\t\ts.removeAllRanges();\n\t\tdocument.body.removeChild(n);\n\t}\n\treturn ok;`,\n\t// End of function body\n\t`}`,\n]\n\n/**\n * Function to handle clicks on a single copy button.\n */\nconst clickHandler = [\n\t// Define click handler function\n\t`async function clickHandler(event) {`,\n\t// Attempt to perform copy operation, first using the Clipboard API,\n\t// and then falling back to a DOM-based approach\n\t`let btn = event.currentTarget;\n\tlet ok = false;\n\tlet code = btn.dataset.code.replace(/\\\\u007f/g, '\\\\n');\n\ttry {\n\t\tawait navigator.clipboard.writeText(code);\n\t\tok = true;\n\t} catch (err) {\n\t\tok = domCopy(code);\n\t}`,\n\t// Exit if the copy operation failed or there is already a tooltip present\n\t`if (!ok || btn.parentNode.querySelector('.feedback')) return;`,\n\t// Show feedback tooltip\n\t`let tt = document.createElement('div');\n\ttt.classList.add('feedback');\n\ttt.append(btn.dataset.copied);\n\tbtn.before(tt);`,\n\t// Use offsetWidth and requestAnimationFrame to opt out of DOM batching,\n\t// which helps to ensure that the transition on 'show' works\n\t`tt.offsetWidth;\n\trequestAnimationFrame(() => tt.classList.add('show'));`,\n\t// Hide & remove the tooltip again when we no longer need it\n\t`let h = () => !tt || tt.classList.remove('show');\n\tlet r = () => {\n\t\tif (!(!tt || parseFloat(getComputedStyle(tt).opacity) > 0)) {\n\t\t\ttt.remove();\n\t\t\ttt = null;\n\t\t}\n\t};\n\tsetTimeout(h, 1500);\n\tsetTimeout(r, 2500);\n\tbtn.addEventListener('blur', h);\n\ttt.addEventListener('transitioncancel', r);\n\ttt.addEventListener('transitionend', r);`,\n\t// End of function body\n\t`}`,\n]\n\n/**\n * Code to initialize all copy buttons on the page.\n *\n * It first attaches the click handler to all buttons that exist on the page right now,\n * and then registers a MutationObserver that handles any new buttons added later\n * (e.g. when the page dynamically loads more content or replaces existing content).\n */\nconst attachHandlers = [\n\t// Define a function that searches a node for matching buttons and initializes them\n\t// unless the node does not support querySelectorAll (e.g. a text node)\n\t`let initButtons = n => !n.querySelectorAll || n.querySelectorAll('[SELECTOR]').forEach(btn =>\n\t\tbtn.addEventListener('click', clickHandler)\n\t);`,\n\t// Use the function to initialize all buttons that exist right now\n\t`initButtons(document);`,\n\t// Register a MutationObserver to initialize any new buttons added later\n\t`let obs = new MutationObserver(ms =>\n\t\tms.forEach(m =>\n\t\t\tm.addedNodes.forEach(n =>\n\t\t\t\tinitButtons(n)\n\t\t\t)\n\t\t)\n\t);\n\tobs.observe(document.body, { childList: true, subtree: true });`,\n\t// Also re-initialize all buttons after view transitions initiated by popular frameworks\n\t`document.addEventListener('astro:page-load', () => initButtons(document));`,\n]\n\nexport const getCopyJsModule = (buttonSelector: string) => {\n\treturn [...domCopy, ...clickHandler, ...attachHandlers]\n\t\t.map((line) =>\n\t\t\tline\n\t\t\t\t.trim()\n\t\t\t\t.replace(/\\s*[\\r\\n]\\s*/g, '')\n\t\t\t\t.replace(/\\s*([:;,={}()<>])\\s*/g, '$1')\n\t\t\t\t.replace(/;}/g, '}')\n\t\t)\n\t\t.join('')\n\t\t.replace(/\\[SELECTOR\\]/g, buttonSelector)\n}\n"],"mappings":"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","names":["import_core"]}