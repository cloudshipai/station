name: Dagger Security Pipeline
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  dagger-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Dagger CLI
        run: |
          curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=0.9.0 sh
          sudo mv bin/dagger /usr/local/bin

      - name: Run Full Security Pipeline
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ENCRYPTION_KEY: ${{ secrets.STATION_ENCRYPTION_KEY }}
        run: |
          cd dev-workspace/ci-cd-examples/dagger-integration
          dagger call full-pipeline \
            --source=../../../ \
            --openai-key=env:OPENAI_API_KEY \
            --encryption-key=env:ENCRYPTION_KEY \
            export --path=./reports

      - name: Extract Reports
        run: |
          cd dev-workspace/ci-cd-examples/dagger-integration
          dagger call get-reports \
            --pipeline=full-pipeline \
            export --path=./extracted-reports

      - name: Process Security Results
        run: |
          cd dev-workspace/ci-cd-examples/dagger-integration
          
          if [ -f "extracted-reports/security/security-report.json" ]; then
            echo "## üîí Security Analysis Results" >> $GITHUB_STEP_SUMMARY
            
            CRITICAL=$(jq -r '.critical_count // 0' extracted-reports/security/security-report.json)
            HIGH=$(jq -r '.high_count // 0' extracted-reports/security/security-report.json)
            
            echo "- **Critical Vulnerabilities:** $CRITICAL" >> $GITHUB_STEP_SUMMARY
            echo "- **High Vulnerabilities:** $HIGH" >> $GITHUB_STEP_SUMMARY
            
            if [ "$CRITICAL" -gt "0" ]; then
              echo "‚ùå Critical vulnerabilities found - failing build"
              exit 1
            fi
          fi

      - name: Upload All Reports  
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dagger-security-reports
          path: dev-workspace/ci-cd-examples/dagger-integration/extracted-reports/

  parallel-analysis:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        analysis: [security-scan, terraform-analysis, sbom-generation, compliance-check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Dagger CLI
        run: |
          curl -L https://dl.dagger.io/dagger/install.sh | DAGGER_VERSION=0.9.0 sh
          sudo mv bin/dagger /usr/local/bin

      - name: Run ${{ matrix.analysis }}
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ENCRYPTION_KEY: ${{ secrets.STATION_ENCRYPTION_KEY }}
        run: |
          cd dev-workspace/ci-cd-examples/dagger-integration
          
          case "${{ matrix.analysis }}" in
            "security-scan")
              dagger call security-scan \
                --source=../../../ \
                --openai-key=env:OPENAI_API_KEY \
                --encryption-key=env:ENCRYPTION_KEY \
                directory --path=/workspace/reports \
                export --path=./reports-${{ matrix.analysis }}
              ;;
            "terraform-analysis")
              dagger call terraform-analysis \
                --source=../../../ \
                --openai-key=env:OPENAI_API_KEY \
                --encryption-key=env:ENCRYPTION_KEY \
                directory --path=/workspace/reports \
                export --path=./reports-${{ matrix.analysis }}
              ;;
            "sbom-generation")
              dagger call sbom-generation \
                --source=../../../ \
                --openai-key=env:OPENAI_API_KEY \
                --encryption-key=env:ENCRYPTION_KEY \
                directory --path=/workspace/reports \
                export --path=./reports-${{ matrix.analysis }}
              ;;
            "compliance-check")
              dagger call compliance-check \
                --source=../../../ \
                --framework="CIS" \
                --openai-key=env:OPENAI_API_KEY \
                --encryption-key=env:ENCRYPTION_KEY \
                directory --path=/workspace/reports \
                export --path=./reports-${{ matrix.analysis }}
              ;;
          esac

      - name: Upload ${{ matrix.analysis }} Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ${{ matrix.analysis }}-report
          path: dev-workspace/ci-cd-examples/dagger-integration/reports-${{ matrix.analysis }}/