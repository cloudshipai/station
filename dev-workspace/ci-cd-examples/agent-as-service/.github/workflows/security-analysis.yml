name: Security Analysis with Station
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  terraform-security:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.modified, '.tf') || github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Station CI Image
        run: |
          # Build Station base image
          docker build -t station-ci:latest -f - . <<EOF
          FROM ubuntu:22.04
          RUN apt-get update && apt-get install -y ca-certificates curl sqlite3 git
          COPY --from=station-build /usr/local/bin/stn /usr/local/bin/stn
          RUN mkdir -p /app/data /app/environment /root/.config/station
          COPY dev-workspace/ci-cd-examples/agent-as-service/config.yml /root/.config/station/config.yaml
          COPY dev-workspace/ci-cd-examples/agent-as-service/variables.yml /app/environment/variables.yml
          COPY dev-workspace/ci-cd-examples/agent-as-service/agents/ /app/environment/agents/
          WORKDIR /workspace
          ENTRYPOINT ["/usr/local/bin/stn"]
          EOF

      - name: Create Reports Directory
        run: mkdir -p reports

      - name: Run Terraform Security Analysis
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -v ${{ github.workspace }}/reports:/workspace/reports \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -e ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
            -e ENCRYPTION_KEY=${{ secrets.STATION_ENCRYPTION_KEY }} \
            -e GITHUB_REPOSITORY=${{ github.repository }} \
            -e GITHUB_REF_NAME=${{ github.ref_name }} \
            -e GITHUB_SHA=${{ github.sha }} \
            station-ci:latest \
            agent run terraform-security-agent \
            --input "Analyze Terraform files for security vulnerabilities and compliance issues"

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terraform-security-report
          path: reports/terraform-security-report.json

      - name: Comment on PR with Security Findings
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('reports/terraform-security-report.json')) {
              const report = JSON.parse(fs.readFileSync('reports/terraform-security-report.json', 'utf8'));
              const comment = `## ðŸ”’ Terraform Security Analysis
              
              **Critical Issues:** ${report.critical || 0}
              **High Issues:** ${report.high || 0}
              **Medium Issues:** ${report.medium || 0}
              
              See full report in the [Security Analysis artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  sbom-analysis:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Reports Directory
        run: mkdir -p reports

      - name: Run SBOM & Vulnerability Analysis
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -v ${{ github.workspace }}/reports:/workspace/reports \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -e OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            -e ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
            -e ENCRYPTION_KEY=${{ secrets.STATION_ENCRYPTION_KEY }} \
            -e GITHUB_REPOSITORY=${{ github.repository }} \
            -e GITHUB_REF_NAME=${{ github.ref_name }} \
            -e GITHUB_SHA=${{ github.sha }} \
            station-ci:latest \
            agent run sbom-security-agent \
            --input "Generate comprehensive SBOM and perform vulnerability analysis"

      - name: Upload SBOM and Vulnerability Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sbom-vulnerability-report
          path: |
            reports/*.json
            reports/*.spdx
            reports/*.cyclonedx